import csv
import os
import uuid
from csv import reader
from datetime import datetime

csvLogFile = f"C:\\csvlog\\POST-{str(uuid.uuid4())}.csv"


def logcsv(row):
    if not os.path.exists(csvLogFile):
        with open(csvLogFile, 'w') as csvfile:
            filewriter = csv.writer(csvfile, delimiter=',')
            test = csv.DictWriter(csvfile, fieldnames=['HostName', 'DateTime', 'IOCType', 'IOCPath', 'OperationType',
                                                       'OpResult'])
            test.writeheader()
        csvfile.close()
    with open(csvLogFile, 'a') as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow(row)
    csvfile.close()


def gettime():
    k = datetime.now()
    return k


class CsvLine():
    def __init__(self, row):
        self.host = row[0]
        self.date_time = row[1]
        self.ioc_type = row[2]
        self.ioc_value = row[3].replace('/','\\')
        self.operation = row[4]
        self.result = row[5]

    def get_host(self):
        return self.host

    def get_date_time(self):
        return self.date_time

    def get_ioc_type(self):
        return self.ioc_type

    def get_ioc_value(self):
        return self.ioc_value

    def get_operation(self):
        return self.operation

    def get_result(self):
        return self.result


class CsvParser():
    def __init__(self, path):
        res = {}
        with open(path, 'r') as f:
            csvreader = reader(f)
            for row in csvreader:
                if not row:
                    continue
                cur_row = CsvLine(row)
                res[cur_row.get_ioc_value()] = cur_row
        self.iocs = res

    def get_ioc_line_by_value(self, ioc_value):
        new_val =ioc_value.replace('/','\\')
        if new_val in self.iocs.keys():
            return self.iocs[new_val]
        return None
import os.path
import time
import stat
from datetime import datetime
from shutil import rmtree
import glob
# from cnc.iocs.csv_reader.csv_parser import CsvParser
try:
    path = r'c:\temp_deletemeplease'
    stats = os.stat(path)
    timestr = time.ctime(stats[stat.ST_MTIME])
    mtime = datetime.strptime(timestr, '%a %b  %d %H:%M:%S %Y')
    MALWARE_CSV_PATH = 'C:/csvlog'
    csv_fp = glob.glob(MALWARE_CSV_PATH + '/*.csv')
    csv_fp = csv_fp[0]
    parser = CsvParser(csv_fp)
    line = parser.get_ioc_line_by_value(path)
    csvtime = datetime.strptime(line.get_date_time(), '%Y-%m-%d %H:%M:%S.%f')
    if csvtime >= mtime:
        try:
            os.remove(path)
        except OSError:
            rmtree(path)
except Exception as e:
    pass

import os.path
try:
 	os.remove(os.getenv('APPDATA') + r"\TempBackUpDB.txt")
except:
	pass
