import os
import shutil
import time
import unittest
from unittest import mock

import requests

from acceptance_tests.common_checks import does_file_or_folder_exist
from agent import agent_main
from cnc import cnc_main


class TestCNCMethods(unittest.TestCase):
    cnc_ip = -1
    cnc_port = -1
    malware_id = -1
    agent_id = -1
    STORAGE_PATH = os.path.join(os.path.dirname(os.path.abspath(__file__)), '..', '..', 'STORAGE_TEST')

    def setUp(self):
        self.cnc_ip = "127.0.0.1"
        self.cnc_port = "5000"
        # Run cnc
        cnc_thread = cnc_main.cnc()
        cnc_thread.setDaemon(True)
        cnc_thread.start()
        try:
            shutil.rmtree('build')
            os.remove('in.spec')
            os.remove('pre.spec')
            os.remove('post.spec')
        except:
            pass

        if os.path.isdir('c:/temp_deletemeplease'):
            shutil.rmtree('c:/temp_deletemeplease')

        with mock.patch('agent.agent_main.input', side_effect=["127.0.0.1", 5000]):
            # run agent stub
            agent, self.agent_id, agent_ip, agent_port = agent_main.agent()

        agent.setDaemon(True)
        agent.start()

    def tearDown(self):
        try:
            shutil.rmtree('build')
        except:
            pass
        try:
            os.remove('in.spec')
        except:
            pass
        try:
            os.remove('pre.spec')
        except:
            pass
        try:
            os.remove('post.spec')
        except:
            pass

    def test_upload(self):
        try:
            # upload
            values = {'malware_name': 'DemoMalware',
                      'malware_description': 'Drive C , FolderCreation'
                      }
            test_status = False
            with  open(self.STORAGE_PATH + "\\demo_malware.exe", 'rb') as malware_exe:
                with  open(self.STORAGE_PATH + "\\demo_malware.csv", 'rb') as malware_csv:
                    with  open(self.STORAGE_PATH + "\\demo_malware.json", 'rb') as malware_json:
                        files = {'malware_exe': malware_exe,
                                 'malware_csv': malware_csv,
                                 'malware_json': malware_json
                                 }
                        result = requests.post("http://{0}:{1}/uploader".format(self.cnc_ip, self.cnc_port),
                                               files=files, data=values)
                        test_status = bool(result.json()["status"])
                        if result.json()["status"] == False or result.json()["id"] < 0: self.fail(
                            "response : " + result.text)
                        self.malware_id = result.json()["id"]

            # check malware status - READY , UPLOAD
            waiting = True
            while waiting:
                values = {'malware_id': self.malware_id}
                result = requests.get("http://{0}:{1}/malware_info".format(self.cnc_ip, self.cnc_port), params=values)
                print(result.json()['msg'])
                if result.json()['msg'] == 'READY':
                    waiting = False
                else:
                    time.sleep(15)
            if not test_status: self.fail("Test_ERROR -> test_upload_Demo_malware ")

            print('malware_id ', self.malware_id, 'READY')

            # send
            values = {'malware_id': self.malware_id,
                      'agent_id': self.agent_id}

            self.assertFalse(does_file_or_folder_exist('c:\\temp_deletemeplease'))
            result = requests.get("http://{0}:{1}/send_malware".format(self.cnc_ip, self.cnc_port), params=values)
            if not result.json()["status"]: self.fail(result.json()["msg"])

            # run
            result = requests.get("http://{0}:{1}/run_malware".format(self.cnc_ip, self.cnc_port), params=values)
            if not result.json()["status"]: self.fail(result.json()["msg"])
            self.assertTrue(does_file_or_folder_exist('c:\\temp_deletemeplease'))
            # revert

            result = requests.get("http://{0}:{1}/revert_malware".format(self.cnc_ip, self.cnc_port), params=values)
            if not result.json()["status"]: self.fail(result.json()["msg"])
            self.assertFalse(does_file_or_folder_exist('c:\\temp_deletemeplease'))

        except Exception as e:
            print(e)
            self.fail(e.__str__())
