# Wannacry Red team automation simulation
# Modules used:
# 1 - File_creation_Module - completed without changes
# 2 - Shcedule_Task_Creation_Module - completed without changes
# 3 - Time_stamp_modification_Module - completed without changes
# 4 - Service_Creation_module - completed without changes
# 5 - File_Search - Manually Created
# Tasks completed:
# 1 - Create new folder:@Please_Read_Me@, @WannaDecryptore@.exe, Hello.wnry, 00000000.eky, taskdl.exe, taskse.dll
# 2 - Creates bat file and run it with cmd.exe - 5511515858228.bat
# 3 - Modifies system32 files: icacls.exe, scrrun.dll, vssadmin.exe, cscript.exe, attrib.exe, wshom.dll, scrobj.dll
# 4 - Creates new registry key HKCU\software\wannacrypt0r\wd
# 5 - Creates new schedule task that runs every 1 minute
# 6 - Creates processes: attrib.exe, icacls.exe, cmd.exe, conhost.exe

# Total Time - 8 hours


import datetime
# ==========Registry imports========
import os
import time

import _winreg as wreg
import common


def error_decorator(f):
    '''
    This is a decorator function meant to decorate the errors of function objects.
    :param f: function object
    :return: the f function return statement or the error is raised
    '''

    def wrapper(*args, **kwargs):
        result = 0
        try:
            if args:
                result = f(*args, **kwargs)
            else:
                result = f()

        except Exception as err:
            common.log("Error in " + f.__name__ + " --> " + str(err))

        finally:
            common.log("Completed -> " + f.__name__ + " | " + str(args))

        return result

    return wrapper


@error_decorator
def find_file(name, path):
    '''
    Find a file in the system path
    :param name: String -> File name
    :param path: system path, Example -> C:\
    :return: String -> The path to the file (e.g C:\path\file)
    '''

    for root, dirs, files in os.walk(path):
        if name in files and "Recycle" not in root:
            return os.path.join(root, name)


@error_decorator
def time_stamp_modify(TARGET_FILE_LOCATION, TARGET_APP):
    '''
    Module to change the modify time of a file
    :param TARGET_APP: File path | String type
    '''

    year = 2017
    month = 11
    day = 5
    hour = 19
    minute = 50
    second = 0
    TARGET_FILE_LOCATION = TARGET_FILE_LOCATION + TARGET_APP
    date = datetime.datetime(year=year, month=month, day=day, hour=hour, minute=minute, second=second)
    modTime = time.mktime(date.timetuple())
    os.utime(TARGET_FILE_LOCATION, (modTime, modTime))


@error_decorator
def service_creator(TARGET_APP, TARGET_APP_LOCATION=None):
    # create Services subkey for "ServiceTest"
    FULL_APP_PATH = TARGET_APP_LOCATION + "\\" + TARGET_APP
    common.log("Creating ServiceTest registry key")
    hkey = wreg.CreateKey(wreg.HKEY_LOCAL_MACHINE,
                          "System\\CurrentControlSet\\Services\\ServiceTest\\")  # TODO - Add this reg-key to indicators?

    # create "ServiceTest" data values
    common.log("Updating ServiceTest metadata")
    wreg.SetValueEx(hkey, "Description", 0, wreg.REG_SZ, "A fake service")
    wreg.SetValueEx(hkey, "DisplayName", 0, wreg.REG_SZ, "ServiceTest Service")
    wreg.SetValueEx(hkey, "ImagePath", 0, wreg.REG_SZ, "Target file")
    wreg.SetValueEx(hkey, "ServiceDLL", 0, wreg.REG_SZ, "C:\\ServiceTest.dll")

    # modify contents of ServiceDLL and ImagePath
    common.log("Modifying ServiceTest binary")
    wreg.SetValueEx(hkey, "ImagePath", 0, wreg.REG_SZ, FULL_APP_PATH)
    wreg.SetValueEx(hkey, "ServiceDLL", 0, wreg.REG_SZ, FULL_APP_PATH)

    hkey.Close()
    time.sleep(2)

    # delete Service subkey for "ServiceTest"
    common.log("Removing ServiceTest", log_type="-")
    hkey = wreg.CreateKey(wreg.HKEY_LOCAL_MACHINE, "System\\CurrentControlSet\\Services\\")
    wreg.DeleteKeyEx(hkey, "ServiceTest")

    hkey.Close()
    time.sleep(2)

    commands = [
        "sc.exe create " + TARGET_APP + " binPath= " + TARGET_APP_LOCATION,
        "sc.exe delete " + TARGET_APP,
    ]
    remote_host = "127.0.0.1"
    for command in commands:
        common.execute(command.format(host=remote_host))


@error_decorator
def schtasks(*args, **kwargs):
    return common.execute(['schtasks.exe'] + list(args), **kwargs)


@error_decorator
def file_creation(TARGET_APP_NAME=None, TARGET_LOCATION=None):
    '''
    This function will create a new file in the Target path
    :param TARGET_APP_NAME: The name of the new file | String rep
    :param TARGET_LOCATION: The path to the new file | String rep
    '''
    filename = TARGET_LOCATION + "\\" + TARGET_APP_NAME
    status = 0
    if not os.path.exists(filename):
        status = os.system('echo "This file was create by WannaCry" > ' + filename)

    return status


def main():
    common.log("Creating logs files")
    if (os.path.exists(common.BASE_DIR + "\\logs.txt")):
        row = [common.HOSTNAME, common.gettime(), 'File', common.BASE_DIR + "\\logs.txt", 'Created', 'Completed']
    else:
        row = [common.HOSTNAME, common.gettime(), 'File', common.BASE_DIR + "\\logs.txt", 'Created', 'Failed']
    common.logcsv(row)

    if (os.path.exists(common.csvLogFile)):
        row = [common.HOSTNAME, common.gettime(), 'File', common.csvLogFile, 'Created', 'Completed']
    else:
        row = [common.HOSTNAME, common.gettime(), 'File', common.csvLogFile, 'Created', 'Failed']
    common.logcsv(row)
    common.log("======================================")

    common.log("####STARTING THE Wannacry RUN...####")
    time.sleep(2)

    # ******************* Create new file under C:\WannaCry *******************
    common.log("Creating new files...")
    time.sleep(2)
    malicious_files = ['@Please_Read_Me@.txt',
                       '@WannaDecryptore@.exe',
                       'Hello.wnry',
                       '00000000.eky',
                       'taskdl.exe',
                       'taskse.dll']
    for file in malicious_files:
        full_file_path = common.BASE_DIR + "\\" + file
        common.log("Creating " + full_file_path)
        status = file_creation(file, common.BASE_DIR)
        if status == 0:
            row = [common.HOSTNAME, common.gettime(), 'File', full_file_path, 'Created', 'Completed']
        else:
            row = [common.HOSTNAME, common.gettime(), 'File', full_file_path, 'Created', 'Failed']
        common.logcsv(row)
    common.log("-------Finished creating files-------")

    # ******************* Creates 5511515858228.bat and run it *******************
    common.log("Creating and running 5511515858228.bat...")
    time.sleep(2)
    bat_name = '5511515858228.bat'
    full_bat_path = common.BASE_DIR + '\\' + bat_name
    if not os.path.exists(full_bat_path):
        status = os.system('echo start calc.exe > ' + full_bat_path)
        if status == 0:
            row = [common.HOSTNAME, common.gettime(), 'File', full_bat_path, 'Created', 'Completed']
        else:
            row = [common.HOSTNAME, common.gettime(), 'File', full_bat_path, 'Created', 'Failed']
        common.logcsv(row)

    try:
        os.system(full_bat_path)  # <-- Run the .bat file
        row = [common.HOSTNAME, common.gettime(), 'Process', "calc.exe", 'Created', 'Completed']
    except:
        row = [common.HOSTNAME, common.gettime(), 'Process', "calc.exe", 'Created', 'Failed']
    common.logcsv(row)
    common.log("-------Finished running 5511515858228.bat-------")

    # ******************* Change modified time stamp (Create, Copy and Delete files) *******************
    common.log("Modifying the system32 files...")
    time.sleep(2)

    modified_files = ['icacls2.exe',
                      'scrrun2.dll',
                      'vssadmin2.exe',
                      'cscript2.exe',
                      'attrib2.exe ',
                      'wshom2.dll',
                      'scrobj2.dll']

    for file in modified_files:
        full_modified_file_path = common.BASE_DIR + '\\' + file

        # ------- Create -------
        status = file_creation(file, common.BASE_DIR)
        if status == 0:
            row = [common.HOSTNAME, common.gettime(), 'File', full_modified_file_path, 'Created', 'Completed']
        else:
            row = [common.HOSTNAME, common.gettime(), 'File', full_modified_file_path, 'Created', 'Failed']
        common.logcsv(row)

        # ------- Copy -------
        target_file_location = "C:\\Windows\\System32"
        target_file_path = target_file_location + '\\' + file
        try:
            common.copy_file(full_modified_file_path, target_file_location)  # Copy files to system32
            row = [common.HOSTNAME, common.gettime(), 'File', target_file_path, 'Created', 'Completed']
        except:
            row = [common.HOSTNAME, common.gettime(), 'File', target_file_path, 'Created', 'Failed']
        common.logcsv(row)

        # ------- Delete -------
        try:
            common.remove_file(full_modified_file_path)
            row = [common.HOSTNAME, common.gettime(), 'File', full_modified_file_path, 'Deleted', 'Completed']
        except:
            row = [common.HOSTNAME, common.gettime(), 'File', full_modified_file_path, 'Deleted', 'Failed']
        common.logcsv(row)
    common.log("-------Finished modifying the files-------")

    # ******************* Create new reg key: HKEY_LOCAL_MACHINE\software\wannacrypt0r\wd *******************
    common.log("Creating Suspicious Registry...")
    time.sleep(2)
    reg_key = "software\\wannacrypt0r\\wd"
    try:
        wreg.CreateKey(wreg.HKEY_LOCAL_MACHINE, reg_key)
        row = [common.HOSTNAME, common.gettime(), 'Registry', 'HKEY_LOCAL_MACHINE\\' + reg_key, 'Created', 'Completed']
    except:
        row = [common.HOSTNAME, common.gettime(), 'Registry', 'HKEY_LOCAL_MACHINE\\' + reg_key, 'Created', 'Failed']
    common.logcsv(row)
    common.log("-------Finished creating reg key-------")

    # ******************* Create and run WanaDecryTaskFile task  *******************
    common.log("Creating new schedule task...")
    common.log("Scheduled Task Privilege Escalation")
    time.sleep(2)
    task_name = 'WanaDecryTaskFile'
    file_path = os.path.abspath('task.log')
    command = "cmd.exe /c whoami.exe > " + file_path
    # code, output = schtasks('/query', '/tn', task_name)
    # if code == 0:
    #   schtasks('/delete', '/tn', task_name, '/f') # Delete the task if it exists
    code, output = schtasks('/create', '/tn', task_name, '/ru', 'system', '/tr', command, '/sc', 'minute', '/mo', '1',
                            '/F')
    if code != 0:
        row = [common.HOSTNAME, common.gettime(), 'Task', task_name, 'Created', 'Failed']
        common.log("Error creating task", log_type="!")
        common.logcsv(row)
        return
    row = [common.HOSTNAME, common.gettime(), 'Task', task_name, 'Created', 'Completed']
    common.logcsv(row)

    code, output = schtasks('/run', '/tn', task_name)  # Run the task and grab the file
    if code == 0:
        common.log("Running Scheduled Task")
        time.sleep(2)
        try:
            common.print_file(file_path)
            row2 = [common.HOSTNAME, common.gettime(), 'File', file_path, 'Created', 'Completed']
        except:
            row2 = [common.HOSTNAME, common.gettime(), 'File', file_path, 'Created', 'Failed']
        common.logcsv(row2)
        common.log("Log File saved")
        time.sleep(1)
        try:
            common.remove_file(file_path)
            row2 = [common.HOSTNAME, common.gettime(), 'File', file_path, 'Deleted', 'Completed']
        except:
            row2 = [common.HOSTNAME, common.gettime(), 'File', file_path, 'Deleted', 'Failed']
        common.logcsv(row2)
        common.log("Log File Was Deleted")

    common.logcsv(row)
    common.log("-------Finished creating and running new schtask-------")

    # ******************* Create new services under C:\WannaCry *******************
    common.log("Creating new services...")
    time.sleep(2)

    wannacry_services = ["attrib.exe", "icacls.exe"]
    for service in wannacry_services:
        try:
            service_creator(service, "C:\\WannaCry")
            row1 = [common.HOSTNAME, common.gettime(), 'Process', service, 'Created', 'Completed']
            row2 = [common.HOSTNAME, common.gettime(), 'Registry',
                    "HKLM\\System\\CurrentControlSet\\Services\\ServiceTest\\",
                    'Created', 'Completed']
            row3 = [common.HOSTNAME, common.gettime(), 'Process', service, 'Deleted', 'Completed']
            row4 = [common.HOSTNAME, common.gettime(), 'Registry',
                    "HKLM\\System\\CurrentControlSet\\Services\\ServiceTest\\",
                    'Deleted', 'Completed']
        except:
            row1 = [common.HOSTNAME, common.gettime(), 'Process', service, 'Created', 'Failed']
            row2 = [common.HOSTNAME, common.gettime(), 'Registry',
                    "HKLM\\System\\CurrentControlSet\\Services\\ServiceTest\\",
                    'Created', 'Failed']
            row3 = [common.HOSTNAME, common.gettime(), 'Process', service, 'Deleted', 'Failed']
            row4 = [common.HOSTNAME, common.gettime(), 'Registry',
                    "HKLM\\System\\CurrentControlSet\\Services\\ServiceTest\\",
                    'Deleted', 'Failed']

        common.logcsv(row1)
        common.logcsv(row2)
        common.logcsv(row3)
        common.logcsv(row4)

    # ******************* Create new services under C:\Windows\System32 *******************
    system32_services = ["cmd.exe", "conhost.exe"]
    for service in system32_services:
        try:
            service_creator(service, "C:\\Windows\\System32")
            row1 = [common.HOSTNAME, common.gettime(), 'Process', service, 'Created', 'Completed']
            row2 = [common.HOSTNAME, common.gettime(), 'Registry',
                    "HKLM\\System\\CurrentControlSet\\Services\\ServiceTest\\",
                    'Created', 'Completed']
            row3 = [common.HOSTNAME, common.gettime(), 'Process', service, 'Deleted', 'Completed']
            row4 = [common.HOSTNAME, common.gettime(), 'Registry',
                    "HKLM\\System\\CurrentControlSet\\Services\\ServiceTest\\",
                    'Deleted', 'Completed']
        except:
            row1 = [common.HOSTNAME, common.gettime(), 'Process', service, 'Created', 'Failed']
            row2 = [common.HOSTNAME, common.gettime(), 'Registry',
                    "HKLM\\System\\CurrentControlSet\\Services\\ServiceTest\\",
                    'Created', 'Failed']
            row3 = [common.HOSTNAME, common.gettime(), 'Process', service, 'Deleted', 'Failed']
            row4 = [common.HOSTNAME, common.gettime(), 'Registry',
                    "HKLM\\System\\CurrentControlSet\\Services\\ServiceTest\\",
                    'Deleted', 'Failed']

        common.logcsv(row1)
        common.logcsv(row2)
        common.logcsv(row3)
        common.logcsv(row4)
    common.log("-------Finished creating new services-------")


if __name__ == "__main__":
    if not os.path.exists(common.LOG_DIR):
        try:
            os.makedirs(common.LOG_DIR)  # Create C:\csvlog LOG_DIR
            row = [common.HOSTNAME, common.gettime(), 'Folder', common.LOG_DIR, 'Created', 'Completed']
        except:
            row = [common.HOSTNAME, common.gettime(), 'Folder', common.LOG_DIR, 'Created', 'Failed']
        common.logcsv(row)

    if not os.path.exists(common.BASE_DIR):
        try:
            os.makedirs(common.BASE_DIR)  # Create C:\WannaCry BASE_DIR
            row = [common.HOSTNAME, common.gettime(), 'Folder', common.BASE_DIR, 'Created', 'Completed']
        except:
            row = [common.HOSTNAME, common.gettime(), 'Folder', common.BASE_DIR, 'Created', 'Failed']
        common.logcsv(row)
    exit(main())
