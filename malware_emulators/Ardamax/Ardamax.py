# Poweliks simulation

# Modules used:
# 1 - FileCreationModule - completed without changes
# 2 - HideFolderModule  - completed without changes
# 3 - TakeScreenShot - completed without changes
# 4 - RegistryCreateModule - completed without changes

# Total Time - 2

###import default packages##
import os
import time
from subprocess import call

import _winreg as wreg
import common


def error_decorator(f):
    """
    This is a decorator function meant to catch the errors of function objects.
    :param f: function object
    :return: the f function return statement or the error is raised
    """

    def wrapper(*args, **kwargs):
        result = 0
        try:
            if args:
                result = f(*args, **kwargs)
            else:
                result = f()
        except Exception as err:
            common.log("Error in {f} - {err}".format(f=f, err=err))
        return result

    return wrapper


@error_decorator
def write_reg_string(hive, key, value, data, delete=True):
    """
    Creates a new subkey | Used for persistence
    :param hive: HKLM | HKey Local Machine / HKCU | HKey Current User
    :param key:  The subkey name
    :param value: The subkey type | REG_SZ
    :param data:  The data the subkey contain (%1 % for example)
    :param delete: Flag used for deletion.
    """
    hkey = wreg.CreateKey(hive, key)
    key = key.rstrip('\\')
    common.log("Writing to registry {key}\\{value} -> {data}".format(key=key, value=value, data=data))
    wreg.SetValueEx(hkey, value, 0, wreg.REG_SZ, data)
    stored, code = wreg.QueryValueEx(hkey, value)
    if data != stored:
        common.log("Wrote {data} but retrieved {stored}".format(data=data, stored=stored), log_type="-")
    # if delete:
    #    common.log("Removing {key}\\{value}".format(key=key, value=value), log_type="-")
    #    wreg.DeleteValue(hkey, value)
    hkey.Close()
    print("")


@error_decorator
def file_creation(TARGET_APP_NAME=None, TARGET_LOCATION=None):
    """
    This function will create a new file in the Target path
    :param TARGET_APP_NAME: The name of the new file | String rep
    :param TARGET_LOCATION: The path to the new file | String rep
    """
    filename = TARGET_LOCATION + "\\" + TARGET_APP_NAME
    status = 0
    if not os.path.exists(filename):
        status = os.system('echo "This file was create by Ardamax" >' + filename)
    return status


def main():
    common.log("Creating logs files")
    if (os.path.exists(common.BASE_DIR + "\\logs.txt")):
        row = [common.HOSTNAME, common.gettime(), 'File', common.BASE_DIR + "\\logs.txt", 'Created', 'Completed']
    else:
        row = [common.HOSTNAME, common.gettime(), 'File', common.BASE_DIR + "\\logs.txt", 'Created', 'Failed']
    common.logcsv(row)

    if (os.path.exists(common.csvLogFile)):
        row = [common.HOSTNAME, common.gettime(), 'File', common.csvLogFile, 'Created', 'Completed']
    else:
        row = [common.HOSTNAME, common.gettime(), 'File', common.csvLogFile, 'Created', 'Failed']
    common.logcsv(row)
    common.log("======================================")

    common.log("Creating new files...")
    # ******************* Create @28640.zip *******************
    time.sleep(2)
    dst_file = '@28640.zip'
    dst_dir = 'c:\\users\\%USERNAME%\\appdata\\local'
    dst_path = dst_dir + "\\" + dst_file
    status = file_creation(dst_file, dst_dir)
    if status == 0:
        common.log(dst_path + " Created!")
        row = [common.HOSTNAME, common.gettime(), 'File', dst_path, 'Created', 'Completed']
    else:
        row = [common.HOSTNAME, common.gettime(), 'File', dst_path, 'Created', 'Failed']
    common.logcsv(row)

    # ******************* Create 28643 dir *******************
    dst_dir = 'c:\\windows\\system32\\28643'
    if not os.path.exists(dst_path):
        try:
            os.makedirs(dst_dir)  # Create 28643 folder
            common.log(dst_dir + " Created!")
            row = [common.HOSTNAME, common.gettime(), 'Folder', dst_dir, 'Created', 'Completed']
        except:
            row = [common.HOSTNAME, common.gettime(), 'Folder', dst_dir, 'Created', 'Failed']
        common.logcsv(row)

    # ******************* Create 28643 files *******************
    malicious_files = ['DPBJ.exe', 'DPBJ0021.dll', 'DPBJ009.dat', 'AKV.exe', 'DPBJ003.rar', 'key.bin']
    for dst_file in malicious_files:
        dst_path = dst_dir + "\\" + dst_file
        status = file_creation(dst_file, dst_dir)
        if status == 0:
            common.log(dst_path + " Created!")
            row = [common.HOSTNAME, common.gettime(), 'File', dst_path, 'Created', 'Completed']
        else:
            row = [common.HOSTNAME, common.gettime(), 'File', dst_path, 'Created', 'Failed']

        common.logcsv(row)

    # ******************* Make 28643 dir hidden *******************
    try:
        call(["attrib", "+H", dst_dir])
        row = [common.HOSTNAME, common.gettime(), 'File', dst_dir, 'Updated', 'Completed']
    except:
        row = [common.HOSTNAME, common.gettime(), 'File', dst_dir, 'Updated', 'Failed']
    common.logcsv(row)

    # ******************* Create esihdrv.sys *******************
    dst_file = 'esihdrv.sys'
    dst_path = dst_dir + "\\" + dst_file
    time.sleep(1)
    status = file_creation(dst_file, dst_dir)
    if status == 0:
        common.log(dst_path + ' -> New driver created')
        row = [common.HOSTNAME, common.gettime(), 'File', dst_path, 'Created', 'Completed']
    else:
        row = [common.HOSTNAME, common.gettime(), 'File', dst_path, 'Created', 'Failed']
    common.logcsv(row)
    common.log("Finished creating files")

    # ******************* Create new subkey *******************
    common.log("Suspicious Registry Persistence")
    windows_base = "Software\\Microsoft\\Windows\\CurrentVersion\\Run\\"
    try:
        write_reg_string(wreg.HKEY_CURRENT_USER, windows_base, 'DPBJ Agent', 'calc.exe', delete=False)
        row = [common.HOSTNAME, common.gettime(), 'Registry',
               'HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\DPBJ Agent', 'Created',
               'Completed']
    except:
        row = [common.HOSTNAME, common.gettime(), 'Registry',
               'HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\DPBJ Agent', 'Created', 'Failed']
    common.logcsv(row)
    common.log("Creating subkey for persistence")

    # ******************* Create ScreenShot *******************
    os.system('python -m pip install pywin32')
    # os.system(python.exe Scripts/pywin32_postinstall.py -install) if the import doesn't work
    import win32gui, win32ui, win32con, win32api
    from datetime import datetime
    today = datetime.now()
    if today.hour < 12:
        h = "00"
    else:
        h = "12"
    snapfolder = "c:\\windows\\system32\\28643\\" + today.strftime('%Y%m%d') + h
    try:
        os.mkdir(snapfolder)  # Create folder for the snapshot | folder name - current date
        row = [common.HOSTNAME, common.gettime(), 'Folder', snapfolder, 'Created', 'Completed']
    except:
        row = [common.HOSTNAME, common.gettime(), 'Folder', snapfolder, 'Created', 'Failed']
    common.logcsv(row)

    for n in range(0, 60, 12):  # taking snapshot every 12 seconds
        time.sleep(12)
        try:
            common.log("Creating " + "snap" + str(n) + ".bmp snapshot")
            hwin = win32gui.GetDesktopWindow()
            width = win32api.GetSystemMetrics(win32con.SM_CXVIRTUALSCREEN)
            height = win32api.GetSystemMetrics(win32con.SM_CYVIRTUALSCREEN)
            left = win32api.GetSystemMetrics(win32con.SM_XVIRTUALSCREEN)
            top = win32api.GetSystemMetrics(win32con.SM_YVIRTUALSCREEN)
            hwindc = win32gui.GetWindowDC(hwin)
            srcdc = win32ui.CreateDCFromHandle(hwindc)
            memdc = srcdc.CreateCompatibleDC()
            bmp = win32ui.CreateBitmap()
            bmp.CreateCompatibleBitmap(srcdc, width, height)
            memdc.SelectObject(bmp)
            memdc.BitBlt((0, 0), (width, height), srcdc, (left, top), win32con.SRCCOPY)
            bmp.SaveBitmapFile(memdc, snapfolder + "\\" + str(n) + ".bmp")
            row = [common.HOSTNAME, common.gettime(), 'File', snapfolder + "\\" + str(n) + ".bmp", 'Created',
                   'Completed']
        except Exception as e:
            row = [common.HOSTNAME, common.gettime(), 'File', snapfolder + "\\" + str(n) + ".bmp", 'Created', 'Failed']
        common.logcsv(row)
    common.log("Finished taking snapshots")


if __name__ == "__main__":
    if not os.path.exists(common.LOG_DIR):
        try:
            os.makedirs(common.LOG_DIR)  # Create C:\csvlog BASE_DIR
            row = [common.HOSTNAME, common.gettime(), 'Folder', common.LOG_DIR, 'Created', 'Completed']
        except:
            row = [common.HOSTNAME, common.gettime(), 'Folder', common.LOG_DIR, 'Created', 'Failed']
        common.logcsv(row)

    if not os.path.exists(common.BASE_DIR):
        try:
            os.makedirs(common.BASE_DIR)  # Create C:\Ardamax BASE_DIR
            row = [common.HOSTNAME, common.gettime(), 'Folder', common.BASE_DIR, 'Created', 'Completed']
        except:
            row = [common.HOSTNAME, common.gettime(), 'Folder', common.BASE_DIR, 'Created', 'Failed']
        common.logcsv(row)
    main()
