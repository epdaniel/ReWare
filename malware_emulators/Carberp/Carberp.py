import getpass
import os
import shutil
import sys

import _winreg as wreg
import common

process_names = [
    "svchost.exe",
]


def http_from_process(name, ip, port):
    path = os.path.join(common.BASE_DIR, name)
    common.log("Making HTTP GET from %s" % path)
    shutil.copy(sys.executable, path)
    common.execute([path, "-c", "import urllib; urllib.urlopen('http://%s:%d')" % (ip, port)])
    common.remove_file(path)


def create_file(filename):
    """
    This function will create a new file in the Target path
    :param TARGET_APP_NAME: The name of the new file | String rep
    :param TARGET_LOCATION: The path to the new file | String rep
    """
    status = 0
    if not os.path.exists(filename):
        status = os.system("echo hello_this_is_file > " + filename)
    return status


def write_reg_string(hive, key, value, data, delete=True):
    hkey = wreg.CreateKey(hive, key)
    key = key.rstrip('\\')
    common.log("Writing to registry %s\\%s -> %s" % (key, value, data))
    wreg.SetValueEx(hkey, value, 0, wreg.REG_SZ, data)
    stored, code = wreg.QueryValueEx(hkey, value)
    if data != stored:
        common.log("Wrote %s but retrieved %s" % (data, stored), log_type="-")

    # if delete:
    #    common.log("Removing %s\\%s" % (key, value), log_type="-")
    #    wreg.DeleteValue(hkey, value)

    hkey.Close()
    print("")


def main():
    common.log("Creating logs files")
    if (os.path.exists(common.BASE_DIR + "\\logs.txt")):
        row = [common.HOSTNAME, common.gettime(), 'File', common.BASE_DIR + "\\logs.txt", 'Created', 'Completed']
    else:
        row = [common.HOSTNAME, common.gettime(), 'File', common.BASE_DIR + "\\logs.txt", 'Created', 'Failed']
    common.logcsv(row)

    if (os.path.exists(common.csvLogFile)):
        row = [common.HOSTNAME, common.gettime(), 'File', common.csvLogFile, 'Created', 'Completed']
    else:
        row = [common.HOSTNAME, common.gettime(), 'File', common.csvLogFile, 'Created', 'Failed']
    common.logcsv(row)
    common.log("======================================")

    common.log("Starting Carberp Attack")
    common.log("======================================")
    common.log("First + second step http request to localhost on port 80 and svchost.exe as process")
    # **************************** Create svchost.exe ****************************
    status = create_file(common.BASE_DIR + "\\svchost.exe")
    if status == 0:
        row = [common.HOSTNAME, common.gettime(), 'File', common.BASE_DIR + '\\svchost.exe', 'Created', 'Completed']
        common.log("File svchost.exe created")
    else:
        row = [common.HOSTNAME, common.gettime(), 'File', common.BASE_DIR + '\\svchost.exe', 'Created', 'Failed']
    common.logcsv(row)

    # **************************** Create ports ****************************
    server, ip, port = common.serve_web(80)
    for process in process_names:
        try:
            http_from_process(process, ip, port)
            common.log("File svchost.exe was Removed")
            server.shutdown()
            row = [common.HOSTNAME, common.gettime(), 'Port', '80', 'Created', 'Completed']
            row2 = [common.HOSTNAME, common.gettime(), 'File', common.BASE_DIR + '\\svchost.exe', 'Deleted',
                    'Completed']
        except:
            row = [common.HOSTNAME, common.gettime(), 'Port', '80', 'Created', 'Failed']
            row2 = [common.HOSTNAME, common.gettime(), 'File', common.BASE_DIR + '\\svchost.exe', 'Deleted', 'Failed']
        common.logcsv(row)
        common.logcsv(row2)

    # **************************** DNS Request ****************************
    common.log("======================================")
    common.log("Second Step DNS request to fromamericawhichlov.com")
    status = os.system("nslookup fromamericawhichlov.com")
    if status == 0:
        common.log("Request to fromamericawhichlov.com has sent")
        row = [common.HOSTNAME, common.gettime(), 'DNS', 'fromamericawhichlov.com', 'Created', 'Completed']
    else:
        row = [common.HOSTNAME, common.gettime(), 'DNS', 'fromamericawhichlov.com', 'Created', 'Failed']
    common.logcsv(row)

    # **************************** Create Local and Local\Temp****************************
    common.log("======================================")
    common.log("Third Step file creation")
    local_path = "C:\\Users\\" + getpass.getuser() + "\\Appdata\\Local"
    temp_path = local_path + "\\" + "temp"
    folders = [local_path, temp_path]
    for folder in folders:
        if not os.path.exists(folder):
            try:
                os.system("mkdir " + folder)
                row = [common.HOSTNAME, common.gettime(), 'Folder', folder, 'Created', 'Completed']
            except:
                row = [common.HOSTNAME, common.gettime(), 'Folder', folder, 'Created', 'Failed']
            common.logcsv(row)

    # **************************** Create files in Local ****************************
    malicious_files = ['Kernel32.dll', 'Ntdll.dll', 'wininet.dll']
    for dst_file in malicious_files:
        dst_path = local_path + "\\" + dst_file
        status = create_file(dst_path)
        if status == 0:
            common.log(dst_path + " Created!")
            row = [common.HOSTNAME, common.gettime(), 'File', dst_path, 'Created', 'Completed']
        else:
            row = [common.HOSTNAME, common.gettime(), 'File', dst_path, 'Created', 'Failed']
        common.logcsv(row)

    # **************************** Create files in Local\Temp ****************************
    dst_path = temp_path + "\\" + 'wininet.dll'
    status = create_file(dst_path)
    if status == 0:
        common.log(dst_path + " Created!")
        row = [common.HOSTNAME, common.gettime(), 'File', dst_path, 'Created', 'Completed']
    else:
        row = [common.HOSTNAME, common.gettime(), 'File', dst_path, 'Created', 'Failed']
    common.logcsv(row)

    # **************************** Create ranCarb.bat ****************************
    dst_file = "C:\\Users\\" + getpass.getuser() + "\\Appdata\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\ranCarb.bat"
    status = os.system('echo test > "' + dst_file + '"')
    if status == 0:
        common.log(dst_file + " Created!")
        row = [common.HOSTNAME, common.gettime(), 'File', dst_file, 'Created', 'Completed']
    else:
        row = [common.HOSTNAME, common.gettime(), 'File', dst_file, 'Created', 'Failed']
    common.logcsv(row)

    # **************************** Create registries ****************************
    common.log("======================================")
    common.log("Fourth step Registry Persistence Start up page")
    TARGET_APP = "C:\\windows\\system32\\cmd.exe"
    for hive in (wreg.HKEY_LOCAL_MACHINE, wreg.HKEY_CURRENT_USER):
        startpage = "Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Startpage\\"
        try:
            write_reg_string(hive, startpage, "RunOnceTest", TARGET_APP)
            if hive is wreg.HKEY_LOCAL_MACHINE:
                row = [common.HOSTNAME, common.gettime(), 'Registry', 'HKEY_LOCAL_MACHINE\\' + startpage, 'Created',
                       'Completed']
            else:
                row = [common.HOSTNAME, common.gettime(), 'Registry', 'HKEY_CURRENT_USER\\' + startpage, 'Created',
                       'Completed']
        except:
            if hive is wreg.HKEY_LOCAL_MACHINE:
                row = [common.HOSTNAME, common.gettime(), 'Registry', 'HKEY_LOCAL_MACHINE\\' + startpage, 'Created',
                       'Failed']
            else:
                row = [common.HOSTNAME, common.gettime(), 'Registry', 'HKEY_CURRENT_USER\\' + startpage, 'Created',
                       'Failed']
        common.logcsv(row)
    common.log("Fourth step Completed")
    common.log("Carberp run finished")


if __name__ == "__main__":
    if not os.path.exists(common.LOG_DIR):
        try:
            os.system("mkdir " + common.LOG_DIR)
            row = [common.HOSTNAME, common.gettime(), 'Folder', common.LOG_DIR, 'Created', 'Completed']
        except:
            row = [common.HOSTNAME, common.gettime(), 'Folder', common.LOG_DIR, 'Created', 'Failed']
        common.logcsv(row)
    if not os.path.exists(common.BASE_DIR):
        try:
            os.system("mkdir " + common.BASE_DIR)
            row = [common.HOSTNAME, common.gettime(), 'Folder', common.BASE_DIR, 'Created', 'Completed']
        except:
            row = [common.HOSTNAME, common.gettime(), 'Folder', common.BASE_DIR, 'Created', 'Failed']
        common.logcsv(row)
    main()
