# Wannacry Red team automation simulation
# Modules used:
# 1 - Registry_Key_Creation_Module - completed without changes
# 2 - File_creation_Module - completed without changes
# Tasks completed:
# 1 - Creates new values to registry keys:
#  HKCU\software\Microsoft\Windows\CurrentVersion\Internet Settings\Auto detect,
#  HKCU\software\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap,
#  HKCU\software\microsoft\windows\currentVersion\Run\


# Total Time - 8 hours

import base64
# ==========Registry imports========
import os
import sys
import time

import Watchdog_Module
import _winreg as wreg
import common


def error_decorator(f):
    '''
    This is a decorator function meant to decorate the errors of function objects.
    :param f: function object
    :return: the f function return statement or the error is raised
    '''

    def wrapper(*args, **kwargs):
        result = 0
        try:
            if args:
                result = f(*args, **kwargs)
            else:
                result = f()

        except Exception as err:
            common.log("Error in " + f.__name__ + " --> " + str(err))

        finally:
            common.log("Completed -> " + f.__name__ + " | " + str(args))

        return result

    return wrapper


@error_decorator
def write_reg_string(hive, key, value, data, delete=True):
    hkey = wreg.CreateKey(hive, key)
    key = key.rstrip('\\')
    common.log("Writing to registry %s\\%s -> %s" % (key, value, data))
    wreg.SetValueEx(hkey, value, 0, wreg.REG_SZ, data)
    stored, code = wreg.QueryValueEx(hkey, value)
    if data != stored:
        common.log("Wrote %s but retrieved %s" % (data, stored), log_type="-")

    if delete:
        common.log("Removing %s\\%s" % (key, value), log_type="-")
        wreg.DeleteValue(hkey, value)

    hkey.Close()
    print("")


@error_decorator
def file_creation(TARGET_APP_NAME=None, TARGET_LOCATION=None):
    '''
    This function will create a new file in the Target path
    :param TARGET_APP_NAME: The name of the new file | String rep
    :param TARGET_LOCATION: The path to the new file | String rep
    '''

    filename = TARGET_LOCATION + "\\" + TARGET_APP_NAME
    if not os.path.exists(filename):
        os.system('echo "This file was create by Poweliks" > ' + filename)

    return filename


@error_decorator
def service_creator(TARGET_APP, TARGET_APP_LOCATION=None):
    # create Services subkey for "ServiceTest"
    FULL_APP_PATH = TARGET_APP_LOCATION + TARGET_APP
    common.log("Creating ServiceTest registry key")
    hkey = wreg.CreateKey(wreg.HKEY_LOCAL_MACHINE, "System\\CurrentControlSet\\Services\\ServiceTest\\")

    # create "ServiceTest" data values
    common.log("Updating ServiceTest metadata")
    wreg.SetValueEx(hkey, "Description", 0, wreg.REG_SZ, "A fake service")
    wreg.SetValueEx(hkey, "DisplayName", 0, wreg.REG_SZ, "ServiceTest Service")
    wreg.SetValueEx(hkey, "ImagePath", 0, wreg.REG_SZ, "Target file")
    wreg.SetValueEx(hkey, "ServiceDLL", 0, wreg.REG_SZ, "C:\\ServiceTest.dll")

    # modify contents of ServiceDLL and ImagePath
    common.log("Modifying ServiceTest binary")
    wreg.SetValueEx(hkey, "ImagePath", 0, wreg.REG_SZ, FULL_APP_PATH)
    wreg.SetValueEx(hkey, "ServiceDLL", 0, wreg.REG_SZ, FULL_APP_PATH)

    hkey.Close()
    time.sleep(2)

    # delete Service subkey for "ServiceTest"
    common.log("Removing ServiceTest", log_type="-")
    hkey = wreg.CreateKey(wreg.HKEY_LOCAL_MACHINE, "System\\CurrentControlSet\\Services\\")
    wreg.DeleteKeyEx(hkey, "ServiceTest")

    hkey.Close()
    time.sleep(2)

    commands = [
        "sc.exe create " + TARGET_APP + " binPath= " + TARGET_APP_LOCATION,
        "sc.exe delete " + TARGET_APP,
    ]
    remote_host = "127.0.0.1"
    for command in commands:
        common.execute(command.format(host=remote_host))


def main():
    if not os.path.exists(common.LOG_DIR):
        try:
            os.makedirs(common.LOG_DIR)  # Create C:\csvlog LOG_DIR
            row = [common.HOSTNAME, common.gettime(), 'Folder', 'C:\\csvlog', 'Created', 'Completed']
        except ImportError:
            row = [common.HOSTNAME, common.gettime(), 'Folder', 'C:\\csvlog', 'Created', 'Failed']
        common.logcsv(row)

    if not os.path.exists(common.BASE_DIR):
        try:
            os.makedirs(common.BASE_DIR)  # Create C:\csvlog LOG_DIR
            row = [common.HOSTNAME, common.gettime(), 'Folder', 'C:\\csvlog', 'Created', 'Completed']
        except ImportError:
            row = [common.HOSTNAME, common.gettime(), 'Folder', 'C:\\csvlog', 'Created', 'Failed']
        common.logcsv(row)

    common.log("####STARTING THE Poweliks RUN...####")
    time.sleep(2)

    # Create new values to the following registry keys:
    #  HKCU\software\Microsoft\Windows\CurrentVersion\Internet Settings\Auto detect,
    #  HKCU\software\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap,
    #  HKCU\software\microsoft\windows\currentVersion\Run\
    common.log("Creating new values in registry keys...")
    time.sleep(2)
    TARGET_APP = "C:\\windows\\system32\calc.exe"
    hive = wreg.HKEY_CURRENT_USER
    try:
        write_reg_string(hive, r"software\Microsoft\Windows\CurrentVersion\Internet Settings\Auto detect", "Poweliks",
                         TARGET_APP)
        row = [common.HOSTNAME, common.gettime(), 'Registry',
               'HKCU\\software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\Auto detect\\Poweliks',
               'Created', 'Completed']
    except ImportError:
        row = [common.HOSTNAME, common.gettime(), 'Registry',
               'HKCU\\software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\Auto detect\\Poweliks',
               'Created', 'Failed']
    common.logcsv(row)
    try:
        write_reg_string(hive, r"software\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap", "Poweliks",
                         TARGET_APP)
        row2 = [common.HOSTNAME, common.gettime(), 'Registry',
                'HKCU\\software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\Poweliks', 'Created',
                'Completed']
    except ImportError:
        row2 = [common.HOSTNAME, common.gettime(), 'Registry',
                'HKCU\\software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\Poweliks', 'Created',
                'Failed']
    common.logcsv(row2)

    reg_encoded = base64.b64encode(TARGET_APP)  # base64 encode new value to add to reg run key
    try:
        write_reg_string(hive, r"software\microsoft\windows\currentVersion\Run", "Poweliks", reg_encoded)
        row = [common.HOSTNAME, common.gettime(), 'Registry',
               'HKCU\\software\\microsoft\\windows\\currentVersion\\Run\\Poweliks', 'Created', 'Completed']
    except ImportError:
        row = [common.HOSTNAME, common.gettime(), 'Registry',
               'HKCU\\software\\microsoft\\windows\\currentVersion\\Run\\Poweliks', 'Created', 'Failed']
    common.logcsv(row)

    common.log("-------Finished creating new values in reg keys-------")

    # Create %Homedrive%/%Homepath%/ntuser.dat.LOG*
    common.log("Creating new file %Homedrive%/%Homepath%/ntuser.dat.LOG...")
    time.sleep(2)
    try:
        file_creation("\\ntuser.dat.LOG", "%Homedrive%%Homepath%")
        row = [common.HOSTNAME, common.gettime(), 'File', '%Homedrive%%Homepath%\\ntuser.dat', 'Created', 'Completed']
    except ImportError:
        row = [common.HOSTNAME, common.gettime(), 'File', '%Homedrive%%Homepath%\\ntuser.dat', 'Created', 'Failed']
    common.logcsv(row)

    common.log("deleting file %Homedrive%/%Homepath%/ntuser.dat.LOG...")
    os.system('del %Homedrive%%Homepath%\\ntuser.dat.LOG')
    common.log("-------Finished creating new file-------")

    # Create two new process: powerhell.exe & rundll32.exe
    common.log("Creating new services...")
    time.sleep(2)
    common.log("Creating powershell.exe process..")
    time.sleep(2)
    try:
        service_creator("powershell.exe", "C:\\windows\\system32\\")
        service_creator("rundll.exe", "C:\\windows\\system32\\")
        row = [common.HOSTNAME, common.gettime(), 'Process', 'Powershell', 'Created', 'Completed']
        rows = [common.HOSTNAME, common.gettime(), 'Process', 'rundll', 'Created', 'Completed']
    except ImportError:
        row = [common.HOSTNAME, common.gettime(), 'Process', 'Powershell', 'Created', 'Failed']
        rows = [common.HOSTNAME, common.gettime(), 'Process', 'rundll', 'Created', 'Failed']
    common.logcsv(row)
    common.logcsv(rows)

    common.log("Creating rundll32.exe process..")
    time.sleep(2)

    common.log("-------Finished creating new services-------")

    common.log("Creating new Watchdog...")
    time.sleep(2)
    common.log("Watchdog is watching..-_-...")
    Watchdog_Module.main()

    common.log("-------Finished creating Watchdog-------")

    # Auto Delete
    common.log("Self destruct is ON , astalavista baby!")
    time.sleep(3)
    os.remove(sys.argv[0])
    common.log("-------File was deleted------")
    sys.exit(0)


if __name__ == "__main__":
    exit(main())
