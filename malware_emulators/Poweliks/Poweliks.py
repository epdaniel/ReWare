# Wannacry Red team automation simulation
# Modules used:
# 1 - Registry_Key_Creation_Module - completed without changes
# 2 - File_creation_Module - completed without changes
# Tasks completed:
# 1 - Creates new values to registry keys:
#  HKCU\software\Microsoft\Windows\CurrentVersion\Internet Settings\Auto detect,
#  HKCU\software\Microsoft\Windows\CurrentVersion\Internet Settings\ZoneMap,
#  HKCU\software\microsoft\windows\currentVersion\Run\


# Total Time - 8 hours

import base64
# ==========Registry imports========
import os
import sys
import time

import Watchdog_Module
import _winreg as wreg
import common


def error_decorator(f):
    '''
    This is a decorator function meant to decorate the errors of function objects.
    :param f: function object
    :return: the f function return statement or the error is raised
    '''

    def wrapper(*args, **kwargs):
        result = 0
        try:
            if args:
                result = f(*args, **kwargs)
            else:
                result = f()

        except Exception as err:
            common.log("Error in " + f.__name__ + " --> " + str(err))

        finally:
            common.log("Completed -> " + f.__name__ + " | " + str(args))

        return result

    return wrapper


@error_decorator
def write_reg_string(hive, key, value, data, delete=True):
    hkey = wreg.CreateKey(hive, key)
    key = key.rstrip('\\')
    common.log("Writing to registry %s\\%s -> %s" % (key, value, data))
    wreg.SetValueEx(hkey, value, 0, wreg.REG_SZ, data)
    stored, code = wreg.QueryValueEx(hkey, value)
    if data != stored:
        common.log("Wrote %s but retrieved %s" % (data, stored), log_type="-")

    hkey.Close()
    print("")


@error_decorator
def file_creation(TARGET_APP_NAME=None, TARGET_LOCATION=None):
    '''
    This function will create a new file in the Target path
    :param TARGET_APP_NAME: The name of the new file | String rep
    :param TARGET_LOCATION: The path to the new file | String rep
    '''
    status = 0
    filename = TARGET_LOCATION + "\\" + TARGET_APP_NAME
    if not os.path.exists(filename):
        os.system('echo "This file was create by Poweliks" > ' + filename)

    return status


@error_decorator
def service_creator(TARGET_APP, TARGET_APP_LOCATION=None):
    # create Services subkey for "ServiceTest"
    FULL_APP_PATH = TARGET_APP_LOCATION + TARGET_APP
    common.log("Creating ServiceTest registry key")
    hkey = wreg.CreateKey(wreg.HKEY_LOCAL_MACHINE, "System\\CurrentControlSet\\Services\\ServiceTest\\")

    # create "ServiceTest" data values
    common.log("Updating ServiceTest metadata")
    wreg.SetValueEx(hkey, "Description", 0, wreg.REG_SZ, "A fake service")
    wreg.SetValueEx(hkey, "DisplayName", 0, wreg.REG_SZ, "ServiceTest Service")
    wreg.SetValueEx(hkey, "ImagePath", 0, wreg.REG_SZ, "Target file")
    wreg.SetValueEx(hkey, "ServiceDLL", 0, wreg.REG_SZ, "C:\\ServiceTest.dll")

    # modify contents of ServiceDLL and ImagePath
    common.log("Modifying ServiceTest binary")
    wreg.SetValueEx(hkey, "ImagePath", 0, wreg.REG_SZ, FULL_APP_PATH)
    wreg.SetValueEx(hkey, "ServiceDLL", 0, wreg.REG_SZ, FULL_APP_PATH)

    hkey.Close()
    time.sleep(2)

    # delete Service subkey for "ServiceTest"
    common.log("Removing ServiceTest", log_type="-")
    hkey = wreg.CreateKey(wreg.HKEY_LOCAL_MACHINE, "System\\CurrentControlSet\\Services\\")
    wreg.DeleteKeyEx(hkey, "ServiceTest")

    hkey.Close()
    time.sleep(2)

    commands = [
        "sc.exe create " + TARGET_APP + " binPath= " + TARGET_APP_LOCATION,
        "sc.exe delete " + TARGET_APP,
    ]
    remote_host = "127.0.0.1"
    for command in commands:
        common.execute(command.format(host=remote_host))


def main():
    common.log("Creating logs files")
    if (os.path.exists(common.BASE_DIR + "\\logs.txt")):
        row = [common.HOSTNAME, common.gettime(), 'File', common.BASE_DIR + "\\logs.txt", 'Created', 'Completed']
    else:
        row = [common.HOSTNAME, common.gettime(), 'File', common.BASE_DIR + "\\logs.txt", 'Created', 'Failed']
    common.logcsv(row)

    if (os.path.exists(common.csvLogFile)):
        row = [common.HOSTNAME, common.gettime(), 'File', common.csvLogFile, 'Created', 'Completed']
    else:
        row = [common.HOSTNAME, common.gettime(), 'File', common.csvLogFile, 'Created', 'Failed']
    common.logcsv(row)
    common.log("======================================")

    common.log("####STARTING THE Poweliks RUN...####")
    time.sleep(2)

    # **************************** Registries ****************************
    common.log("Creating new values in registry keys...")
    time.sleep(2)
    TARGET_APP = "C:\\windows\\system32\calc.exe"
    hive = wreg.HKEY_CURRENT_USER
    reg_keys = ["software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\Auto detect",
                "software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap",
                "software\\microsoft\\windows\\currentVersion\\Run"]
    for reg_key in reg_keys:
        full_reg_key = "HKEY_CURRENT_USER\\" + reg_key + '\\Poweliks'
        try:
            target = TARGET_APP
            if "\\Run" in reg_key:
                target = base64.b64encode(target)
            write_reg_string(hive, reg_key, "Poweliks", target)
            row = [common.HOSTNAME, common.gettime(), 'Registry', full_reg_key, 'Created', 'Completed']
        except:
            row = [common.HOSTNAME, common.gettime(), 'Registry', full_reg_key, 'Created', 'Failed']
        common.logcsv(row)
    common.log("-------Finished creating new values in reg keys-------")

    # **************************** Files in C:\Users\%USERNAME% ****************************
    common.log("Creating new file %Homedrive%/%Homepath%/ntuser.dat.LOG...")
    time.sleep(2)
    file_name = "ntuser.dat.LOG"
    dir_name = "%Homedrive%%Homepath%"
    full_file_path = dir_name + "\\" + file_name
    status = file_creation(file_name, dir_name)
    if status == 0:
        row = [common.HOSTNAME, common.gettime(), 'File', full_file_path, 'Created', 'Completed']
    else:
        row = [common.HOSTNAME, common.gettime(), 'File', full_file_path, 'Created', 'Failed']
    common.logcsv(row)

    common.log("deleting file " + full_file_path + "...")
    status = os.system('del ' + full_file_path)
    if status == 0:
        row = [common.HOSTNAME, common.gettime(), 'File', full_file_path, 'Deleted', 'Completed']
    else:
        row = [common.HOSTNAME, common.gettime(), 'File', full_file_path, 'Deleted', 'Failed']
    common.logcsv(row)
    common.log("-------Finished creating new file-------")

    # **************************** New process ****************************
    # Create two new process: powerhell.exe & rundll32.exe
    common.log("Creating new services...")
    time.sleep(2)
    services = ["powershell.exe", "rundll32.exe"]
    for service in services:
        try:
            common.log("Creating " + service + " process..")
            time.sleep(2)
            service_creator(service, "C:\\windows\\system32\\")
            row1 = [common.HOSTNAME, common.gettime(), 'Process', service, 'Created', 'Completed']
            row2 = [common.HOSTNAME, common.gettime(), 'Registry',
                    "HKLM\\System\\CurrentControlSet\\Services\\ServiceTest\\",
                    'Created', 'Completed']
            row3 = [common.HOSTNAME, common.gettime(), 'Process', service, 'Deleted', 'Completed']
            row4 = [common.HOSTNAME, common.gettime(), 'Registry',
                    "HKLM\\System\\CurrentControlSet\\Services\\ServiceTest\\",
                    'Deleted', 'Completed']
        except:
            row1 = [common.HOSTNAME, common.gettime(), 'Process', service, 'Created', 'Failed']
            row2 = [common.HOSTNAME, common.gettime(), 'Registry',
                    "HKLM\\System\\CurrentControlSet\\Services\\ServiceTest\\",
                    'Created', 'Failed']
            row3 = [common.HOSTNAME, common.gettime(), 'Process', service, 'Deleted', 'Failed']
            row4 = [common.HOSTNAME, common.gettime(), 'Registry',
                    "HKLM\\System\\CurrentControlSet\\Services\\ServiceTest\\",
                    'Deleted', 'Failed']
        common.logcsv(row1)
        common.logcsv(row2)
        common.logcsv(row3)
        common.logcsv(row4)
    common.log("-------Finished creating new services-------")

    # **************************** Watchdog ****************************
    common.log("Creating new Watchdog...")
    time.sleep(2)
    try:
        Watchdog_Module.main()
        row = [common.HOSTNAME, common.gettime(), 'Process', "python.exe", 'Created', 'Completed']
    except:
        row = [common.HOSTNAME, common.gettime(), 'Process', service, 'Created', 'Failed']

    common.logcsv(row)
    common.log("Watchdog is watching..-_-...")
    common.log("-------Finished creating Watchdog-------")

    # **************************** Auto Deletion ****************************
    common.log("Self destruct is ON , astalavista baby!")
    time.sleep(3)
    status = os.remove(sys.argv[0])
    if status == 0:
        row = [common.HOSTNAME, common.gettime(), 'File', sys.argv[0], 'Deleted', 'Completed']
    else:
        row = [common.HOSTNAME, common.gettime(), 'File', sys.argv[0], 'Deleted', 'Failed']
    common.logcsv(row)
    common.log("-------File was deleted------")
    sys.exit(0)


if __name__ == "__main__":
    if not os.path.exists(common.LOG_DIR):
        try:
            os.makedirs(common.LOG_DIR)  # Create C:\csvlog LOG_DIR
            row = [common.HOSTNAME, common.gettime(), 'Folder', common.LOG_DIR, 'Created', 'Completed']
        except:
            row = [common.HOSTNAME, common.gettime(), 'Folder', common.LOG_DIR, 'Created', 'Failed']
        common.logcsv(row)
    if not os.path.exists(common.BASE_DIR):
        try:
            os.makedirs(common.BASE_DIR)  # Create C:\Poweliks LOG_DIR
            row = [common.HOSTNAME, common.gettime(), 'Folder', common.BASE_DIR, 'Created', 'Completed']
        except:
            row = [common.HOSTNAME, common.gettime(), 'Folder', common.BASE_DIR, 'Created', 'Failed']
        common.logcsv(row)
    print("aaa")
    exit(main())
