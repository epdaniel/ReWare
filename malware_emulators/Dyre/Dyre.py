# Name: Unexpected Network Activity from Microsoft Tools
# RTA: findstr_pw_search.py
# ATT&CK: T1127
# Description: Creates network traffic from a process which is named to match common administration and developer tools
#              that do not typically make network traffic unless being used maliciously.

import os
import shutil
import sys
import time

import _winreg as wreg
import common

process_names = [
    "bginfo.exe",
]


def http_from_process(name, ip, port):
    path = os.path.join(common.BASE_DIR, name)
    common.log("Making HTTP GET from %s" % path)
    shutil.copy(sys.executable, path)
    common.execute([path, "-c", "import urllib; urllib.urlopen('http://%s:%d')" % (ip, port)])
    common.remove_file(path)


def schtasks(*args, **kwargs):
    return common.execute(['schtasks.exe'] + list(args), **kwargs)


def create_file(file_name):
    os.system("echo hello_this_is_file > " + common.BASE_DIR + "\\" + file_name)


def write_reg_string(hive, key, value, data, delete=True):
    hkey = wreg.CreateKey(hive, key)
    key = key.rstrip('\\')
    common.log("Writing to registry %s\\%s -> %s" % (key, value, data))
    wreg.SetValueEx(hkey, value, 0, wreg.REG_SZ, data)
    stored, code = wreg.QueryValueEx(hkey, value)
    if data != stored:
        common.log("Wrote %s but retrieved %s" % (data, stored), log_type="-")

    hkey.Close()
    print("")


def main():
    common.log("Creating logs files")
    if (os.path.exists(common.BASE_DIR + "\\logs.txt")):
        row = [common.HOSTNAME, common.gettime(), 'File', common.BASE_DIR + "\\logs.txt", 'Created', 'Completed']
    else:
        row = [common.HOSTNAME, common.gettime(), 'File', common.BASE_DIR + "\\logs.txt", 'Created', 'Failed']
    common.logcsv(row)

    if (os.path.exists(common.csvLogFile)):
        row = [common.HOSTNAME, common.gettime(), 'File', common.csvLogFile, 'Created', 'Completed']
    else:
        row = [common.HOSTNAME, common.gettime(), 'File', common.csvLogFile, 'Created', 'Failed']
    common.logcsv(row)
    common.log("======================================")

    common.log("Starting Dyre Attack")
    common.log("======================================")
    common.log("First step create new files")

    paths = ["%Homedrive%%Homepath%/AppData/Local/userdat.dat",
             "%Homedrive%%Homepath%/AppData/Local/googleupdaterr.exe"]
    for dst_path in paths:
        try:
            os.system("echo dyre > " + dst_path)
            row = [common.HOSTNAME, common.gettime(), 'File', dst_path, 'Created', 'Completed']
        except:
            row = [common.HOSTNAME, common.gettime(), 'File', dst_path, 'Created', 'Failed']
        common.logcsv(row)

    common.log("======================================")
    common.log("Second step http request to localhost on port 80")
    try:
        create_file("bginfo.exe")
        row = [common.HOSTNAME, common.gettime(), 'File', common.BASE_DIR + '\\bginfo.exe', 'Created', 'Completed']
        common.log("File bginfo.exe created")
    except:
        row = [common.HOSTNAME, common.gettime(), 'Folder', common.BASE_DIR + '\\bginfo.exe', 'Created', 'Failed']
    common.logcsv(row)

    server, ip, port = common.serve_web(80)
    for process in process_names:
        try:
            http_from_process(process, ip, port)
            common.log("File bginfo.exe was Removed")
            row = [common.HOSTNAME, common.gettime(), 'Port', '80', 'Created', 'Completed']
            row2 = [common.HOSTNAME, common.gettime(), 'File', common.BASE_DIR + '\\bginfo.exe', 'Deleted', 'Completed']
        except:
            row = [common.HOSTNAME, common.gettime(), 'Port', '80', 'Created', 'Failed']
            row2 = [common.HOSTNAME, common.gettime(), 'File', common.BASE_DIR + '\\bginfo.exe', 'Deleted', 'Failed']
        common.logcsv(row)
        common.logcsv(row2)
    server.shutdown()
    common.log("======================================")
    # Next section
    # ----------------------------------------------------
    common.log("Third Step Scheduled Task Privilege Escalation")
    task_name = 'googleupdaterr'
    file_path = os.path.abspath('task.log')
    command = "cmd.exe /c whoami.exe > " + file_path

    code, output = schtasks('/create', '/tn', task_name, '/ru', 'system', '/tr', command, '/sc', 'onlogon', '/F')
    if code != 0:
        common.log("Error creating task", log_type="!")
        row = [common.HOSTNAME, common.gettime(), 'Task', 'googleupdaterr', 'Created', 'Failed']
        common.logcsv(row)
        return
    row = [common.HOSTNAME, common.gettime(), 'Task', 'googleupdaterr', 'Created', 'Completed']
    common.logcsv(row)
    common.log("Scheduled Task Created")
    # Run the task and grab the file
    code, output = schtasks('/run', '/tn', task_name)
    if code == 0:
        common.log("Running Scheduled Task")
        time.sleep(2)
        try:
            common.print_file(file_path)
            row2 = [common.HOSTNAME, common.gettime(), 'File', file_path, 'Created', 'Completed']
        except:
            row2 = [common.HOSTNAME, common.gettime(), 'File', file_path, 'Created', 'Failed']
        common.logcsv(row2)
        common.log("Log File saved")
        time.sleep(1)
        try:
            common.remove_file(file_path)
            row2 = [common.HOSTNAME, common.gettime(), 'File', file_path, 'Deleted', 'Completed']
        except:
            row2 = [common.HOSTNAME, common.gettime(), 'File', file_path, 'Deleted', 'Failed']
        common.logcsv(row2)
        common.log("Log File Was Deleted")

    common.logcsv(row)

    # Next section
    # ----------------------------------------------------
    common.log("======================================")
    common.log("Fourth step Registry Persistence Tracing_Keys")
    TARGET_APP = "C:\\windows\\system32\calc.exe"
    keys = [("Software\\Microsoft\\Tracing\\Explorer_RSApi32", "RunOnceTest"),
            ("Software\\Microsoft\\Tracing\\Explorer_RASMASC", "RunTest")]
    hives = [(wreg.HKEY_LOCAL_MACHINE, "HKEY_LOCAL_MACHINE")]
    for hive, hive_name in hives:
        for key, val in keys:
            try:
                write_reg_string(hive, key, val, TARGET_APP)
                row = [common.HOSTNAME, common.gettime(), 'Registry', hive_name + "\\" + key + "\\" + val, 'Created',
                       'Completed']
            except Exception as e:
                row = [common.HOSTNAME, common.gettime(), 'Registry', hive_name + "\\" + key + "\\" + val, 'Created',
                       'Failed - ' + str(e)]
            common.logcsv(row)
    try:
        write_reg_string(wreg.HKEY_CURRENT_USER, "Software\\Microsoft\\Windows\\CurrentVersion\\Run", "Google",
                         TARGET_APP)
        row = [common.HOSTNAME, common.gettime(), 'Registry',
               "HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RuN\\Google", 'Created', 'Completed']
    except Exception as e:
        row = [common.HOSTNAME, common.gettime(), 'Registry',
               "HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RuN\\Google", 'Created',
               'Failed - ' + str(e)]
    common.logcsv(row)

    # Next section
    # ----------------------------------------------------
    common.log("======================================")
    common.log("Fifth step Create DNS Requests")
    try:
        os.system("nslookup icanhzip.com")
        row = [common.HOSTNAME, common.gettime(), 'DNS', 'icanhzip.com', 'Created', 'Completed']
    except:
        row = [common.HOSTNAME, common.gettime(), 'DNS', 'icanhzip.com', 'Created', 'Failed']
    common.logcsv(row)
    common.log("Creating request to icanhzip.com")
    try:
        os.system("nslookup digicert.com")
        row = [common.HOSTNAME, common.gettime(), 'DNS', 'digicert.com', 'Created', 'Completed']
    except:
        row = [common.HOSTNAME, common.gettime(), 'DNS', 'digicert.com', 'Created', 'Failed']
    common.logcsv(row)
    common.log("Creating request to digicert.com")
    try:
        os.system("nslookup stun2.I.google.com")
        row = [common.HOSTNAME, common.gettime(), 'DNS', 'stun2.I.google.com', 'Created', 'Completed']
    except:
        row = [common.HOSTNAME, common.gettime(), 'DNS', 'stun2.I.google.com', 'Created', 'Failed']
    common.logcsv(row)
    common.log("Creating request to stun2.I.google.com")


if __name__ == "__main__":
    if not os.path.exists(common.LOG_DIR):
        try:
            os.system("mkdir " + common.LOG_DIR)
            row = [common.HOSTNAME, common.gettime(), 'Folder', common.LOG_DIR, 'Created', 'Completed']
        except:
            row = [common.HOSTNAME, common.gettime(), 'Folder', common.LOG_DIR, 'Created', 'Failed']
        common.logcsv(row)

    if not os.path.exists(common.BASE_DIR):
        try:
            os.system("mkdir " + common.BASE_DIR)
            row = [common.HOSTNAME, common.gettime(), 'Folder', common.BASE_DIR, 'Created', 'Completed']
        except:
            row = [common.HOSTNAME, common.gettime(), 'Folder', common.BASE_DIR, 'Created', 'Failed']
        common.logcsv(row)
    main()
