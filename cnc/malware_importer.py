from shutil import copyfile

from cnc.app_code.DB import *
from cnc.ioc_parser import IocParser
from cnc.revert.compiler import Compiler


# from app_code.DB import MalwaresDB


class MalwareImporter:
    def __init__(self, storage_path, malware_id):
        self.storage_path = storage_path + malware_id + '\\'
        csv_file_path = self.storage_path + f'{malware_id}.csv'
        self.malware_id = malware_id
        self.parser = IocParser(csv_file_path)

        self._pre_path = self.storage_path + 'pre.py'
        self._in_path = self.storage_path + 'in.py'
        self._post_path = self.storage_path + 'post.py'

    @staticmethod
    def is_lateral_movement(csv_path):
        parser = IocParser(csv_path)
        res = parser.get_parsed_results()
        for i in res:
            if i._ioc_type == 'Lateral Movement':
                return True
        return False

    @staticmethod
    def get_lateral_movement_code(csv_path):
        parser = IocParser(csv_path)
        res = parser.get_parsed_results()
        for i in res:
            if i._type == 'Lateral Movement':
                op

    def create_config_file(self):
        conf_string = f"""id={self.malware_id}
pre_c='pre.exe'
in_c='in.exe'
exe_c='malware.exe'
post_c='post.exe'
time_out= 100
        """
        # os.mkdir(self.storage_path + self.malware_id + "/assets/")
        self.conf_path = f'{self.storage_path}assets\\conf.txt'
        with open(self.conf_path, 'w') as f:
            f.write(conf_string)
    def create_assets(self):
        mdb = MalwaresDB()
        # t = Thread(self._create_assets())
        # t.run()
        self._create_assets()
        mdb.UPDATE_STATUS(self.malware_id,'READY')
        return 1
    def _create_assets(self):
        parsed_iocs = self.parser.get_parsed_results()
        compiler = Compiler(parsed_iocs, self.malware_id)
        pre_code, in_code, post_code = compiler.get_code_as_string()
        with open(self._pre_path, 'w') as f:
            f.write(pre_code)
        with open(self._in_path, 'w') as f:
            f.write(in_code)
        with open(self._post_path, 'w') as f:
            f.write(post_code)

        compiled_pre_path = compiler.compile_to_exe(folder_path=self.storage_path, file_name=self._pre_path)
        compiled_in_path = compiler.compile_to_exe(folder_path=self.storage_path, file_name=self._in_path)
        compiled_post_path = compiler.compile_to_exe(folder_path=self.storage_path, file_name=self._post_path)
        self.malware_path = self.storage_path + 'assets\\malware.exe'
        self.create_config_file()
        copyfile(self.storage_path + f'{self.malware_id}.exe', self.malware_path)
        output_file = self.storage_path
        compiler.merge_to_zip(compiled_pre_path, compiled_in_path, compiled_post_path, self.malware_path,
                              self.conf_path, output_file)
